node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2800
          }
          dim {
            size: 5
          }
        }
        tensor_content: "\000`\006E\000\240\006E\000p\007E\000`\010E\000\020\010E\000\240\006E\000p\007E\000`\010E\000\020\010E\000\220\010E\000p\007E\000`\010E\000\020\010E\000\220\010E\000\320\007E\000`\010E\000\020\010E\000\220\010E\000\320\007E\000`\007E\000\020\010E\000\220\010E\000\320\007E\000`\007E\000\200\006E\000\220\010E\000\320\007E\000`\007E\000\200\006E\000\000\006E\000\320\007E\000`\007E\000\200\006E\000\000\006E\000@\006E\000`p\002E\000P\004E\000\240\002E\000 \003E\000p\002E\000\000\003E\000\240\002E\000 \003E\000p\002E\000\000\003E\000\320\002E\000 \003E\000p\002E\000\000\003E\000\320\002E\000\320\005E\000p\002E\000\000\003E\000\320\002E\000\320\005E\000\300\006E\000\000\003E\000\320\002E\000\320\005E\000\300\006E\000\260\010E\000\320\002E\000\320\005E\000\300\006E\000\260\010E\000\360\nE\000\320\005E\000\300\006E\000\260\010E\000\360\nE\000P\017E\000\300\006E\000\260\010E\000\360\nE\000P\017E\000@\020E\000\260\010E\000\360\nE\000P\017E\000@\020E\000p\023E\000\360\nE\000P\017E\000@\020E\000p\023E\000`\021E\000P\017E\000@\020E\000p\023E\000`\021E\000`\027E\000@\020E\000p\023E\000`\021E\000`\027E\000@\032E\000p\023E\000`\021E\000`\027E\000@\032E\000\000 E\000`\021E\000`\027E\000@\032E\000\000 E\000p E\000`\027E\000@\032E\000\000 E\000p E\000\300\037E\000@\032E\000\000 E\000p E\000\300\037E\000\200!E\000\000 E\000p E\000\300\037E\000\200!E\000\260\035E\000p E\000\300\037E\000\200!E\000\260\035E\000`\036E\000\300\037E\000\200!E\000\260\035E\000`\036E\000\340\037E\000\200!E\000\260\035E\000`\036E\000\340\037E\000@#E\000\260\035E\000`\036E\000\340\037E\000@#E\000P)E\000`\036E\000\340\037E\000@#E\000P)E\000\020/E\000\340\037E\000@#E\000P)E\000\020/E\000p3E\000@#E\000P)E\000\020/E\000p3E\000p1E\000P)E\000\020/E\000p3E\000p1E\000`,E\000\020/E\000p3E\000p1E\000`,E\000\220)E\000p3E\000p1E\000`,E\000\220)E\000@$E\000p1E\000`,E\000\220)E\000@$E\000\320!E\000`,E\000\220)E\000@$E\000\320!E\0000%E\000\220)E\000@$E\000\320!E\0000%E\000p&E\000@$E\000\320!E\0000%E\000p&E\000 &E\000\320!E\0000%E\000p&E\000 &E\000 %E\0000%E\000p&E\000 &E\000 %E\000`$E\000p&E\000 &E\000 %E\000`$E\000\360&E\000 &E\000 %E\000`$E\000\360&E\000\220!E\000 %E\000`$E\000\360&E\000\220!E\000\020$E\000``\034E\000\320!E\0000\035E\000\340\035E\000`\034E\000\260\035E\0000\035E\000\340\035E\000`\034E\000\260\035E\000\360\035E\000\340\035E\000`\034E\000\260\035E\000\360\035E\000 \036E\000`\034E\000\260\035E\000\360\035E\000 \036E\000\000#E\000\260\035E\000\360\035E\000 \036E\000\000#E\000\260 E\000\360\035E\000 \036E\000\000#E\000\260 E\000\320!E\000 \036E\000\000#E\000\260 E\000\320!E\000\360\'E\000\000#E\000\260 E\000\320!E\000\360\'E\000@*E\000\260 E\000\320!E\000\360\'E\000@*E\000 *E\000\320!E\000\360\'E\000@*E\000 *E\000\200+E\000\360\'E\000@*E\000 *E\000\200+E\000p(E\000@*E\000 *E\000\200+E\000p(E\000\240(E\000 *E\000\200+E\000p(E\000\240(E\000\320\'E\000\200+E\000p(E\000\240(E\000\320\'E\000@.E\000p(E\000\240(E\000\320\'E\000@.E\000@+E\000\240(E\000\320\'E\000@.E\000@+E\000P*E\000\320\'E\000@.E\000@+E\000P*E\000\200)E\000@.E\000@+E\000P*E\000\200)E\000\340)E\000@+E\000P*E\000\200)E\000\340)E\000@)E\000P*E\000\200)E\000\340)E\000@)E\000\320(E\000\200)E\000\340)E\000@)E\000\320(E\000\000,E\000\340)E\000@)E\000\320(E\000\000,E\000\320-E\000@)E\000\320(E\000\000,E\000\320-E\000 .E\000\320(E\000\000,E\000\320-E\000 .E\000p1E\000\000,E\000\320-E\000 .E\000p1E\000\2401E\000\320-E\000 .E\000p1E\000\2401E\000p1E\000 .E\000p1E\000\2401E\000p1E\000`-E\000p1E\000\2401E\000p1E\000`-E\0000/E\000\2401E\000p1E\000`-E\0000/E\0000-E\000p1E\000`-E\0000/E\0000-E\000\260&E\000`-E\0000/E\0000-E\000\260&E\000 (E\0000/E\0000-E\000\260&E\000 (E\000\220%E\0000-E\000\260&E\000 (E\000\220%E\000\240\'E\000\260&E\000 (E\000\220%E\000\240\'E\000\000)E\000 (E\000\220%E\000\240\'E\000\000)E\000\340(E\000\220%E\000\240\'E\000\000)E\000\340(E\000p)E\000\240\'E\000\000)E\000\340(E\000p)E\000\360(E\000\000)E\000\340(E\000p)E\000\360(E\000\320(E\000\340(E\000p)E\000\360(E\000\320(E\000\220\'E\000p)E\000\360(E\000\320(E\000\220\'E\000\020(E\000\360(E\000\320(E\000\220\'E\000\020(E\000\220&E\000\320(E\000\220\'E\000\020(E\000\220&E\000\240\'E\000\220\'E\000\020(E\000\220&E\000\240\'E\000`)E\000\020(E\000\220&E\000\240\'E\000`)E\000\240(E\000\220&E\000\240\'E\000`)E\000\240(E\000`(E\000\240\'E\000`)E\000\240(E\000`(E\000p#E\000`)E\000\240(E\000`(E\000p#E\000\000%E\000\240(E\000`(E\000p#E\000\000%E\000P E\000`(E\000p#E\000\000%E\000P E\000\360\036E\000p#E\000\000%E\000P E\000\360\036E\000\260\037E\000\000%E\000P E\000\360\036E\000\260\037E\0000 E\000P E\000\360\036E\000\260\037E\0000 E\000  E\000\360\036E\000\260\037E\0000 E\000  E\000p\037E\000\260\037E\0000 E\000  E\000p\037E\000 \035E\0000 E\000  E\000p\037E\000 \035E\000\260\037E\000  E\000p\037E\000 \035E\000\260\037E\000\340\037E\000pp\031E\000 \026E\000\340\027E\000@\027E\000p\031E\000\020\033E\000\340\027E\000@\027E\000p\031E\000\020\033E\000\000\032E\000@\027E\000p\031E\000\020\033E\000\000\032E\000@\032E\000p\031E\000\020\033E\000\000\032E\000@\032E\000\360\026E\000\020\033E\000\000\032E\000@\032E\000\360\026E\000\360\031E\000\000\032E\000@\032E\000\360\026E\000\360\031E\000\240\031E\000@\032E\000\360\026E\000\360\031E\000\240\031E\000\320\033E\000\360\026E\000\360\031E\000\240\031E\000\320\033E\000p\033E\000\360\031E\000\240\031E\000\320\033E\000p\033E\000\320\035E\000\240\031E\000\320\033E\000p\033E\000\320\035E\000\340\034E\000\320\033E\000p\033E\000\320\035E\000\340\034E\000P\035E\000p\033E\000\320\035E\000\340\034E\000P\035E\000\220\034E\000\320\035E\000\340\034E\000P\035E\000\220\034E\000P\034E\000\340\034E\000P\035E\000\220\034E\000P\034E\000\220\033E\000P\035E\000\220\034E\000P\034E\000\220\033E\000`\030E\000\220\034E\000P\034E\000\220\033E\000`\030E\000@\030E\000P\034E\000\220\033E\000`\030E\000@\030E\0000\030E\000\220\033E\000`\030E\000@\030E\0000\030E\000\000\027E\000`\030E\000@\030E\0000\030E\000\000\027E\000\020\027E\000@\030E\0000\030E\000\000\027E\000\020\027E\000\020\030E\0000\030E\000\000\027E\000\020\027E\000\020\030E\000\300\027E\000\000\027E\000\020\027E\000\020\030E\000\300\027E\000p\030E\000\020\027E\000\020\030E\000\300\027E\000p\030E\000 \030E\000\020\030E\000\300\027E\000p\030E\000 \030E\000\260\027E\000\300\027E\000p\030E\000 \030E\000\260\027E\000 \027E\000pp\025E\000P\035E\000\300\033E\000\220\032E\000p\025E\000\340\023E\000\300\033E\000\220\032E\000p\025E\000\340\023E\000\020\023E\000\220\032E\000p\025E\000\340\023E\000\020\023E\000p\024E\000p\025E\000\340\023E\000\020\023E\000p\024E\0000\025E\000\340\023E\000\020\023E\000p\024E\0000\025E\000\300\024E\000\020\023E\000p\024E\0000\025E\000\300\024E\000\260\024E\000pp\022E\000\360\020E\000@\022E\000\260\022E\000p\022E\000\200\022E\000@\022E\000\260\022E\000p\022E\000\200\022E\000`\022E\000\260\022E\000p\022E\000\200\022E\000`\022E\000\300\020E\000p\022E\000\200\022E\000`\022E\000\300\020E\000\220\016E\000\200\022E\000`\022E\000\300\020E\000\220\016E\000\360\rE\000`\022E\000\300\020E\000\220\016E\000\360\rE\000`\016E\000\300\020E\000\220\016E\000\360\rE\000`\016E\000\340\014E\000\220\016E\000\360\rE\000`\016E\000\340\014E\000\340\nE\000\360\rE\000`\016E\000\340\014E\000\340\nE\000\360\tE\000`\016E\000\340\014E\000\340\nE\000\360\tE\000 \005E\000\340\014E\000\340\nE\000\360\tE\000 \005E\000\220\005E\000\340\nE\000\360\tE\000 \005E\000\220\005E\000\000\007E\000\360\tE\000 \005E\000\220\005E\000\000\007E\000\020\006E\000 \005E\000\220\005E\000\000\007E\000\020\006E\000\220\007E\000\220\005E\000\000\007E\000\020\006E\000\220\007E\000\260\007E\000\000\007E\000\020\006E\000\220\007E\000\260\007E\000\000\tE\000\020\006E\000\220\007E\000\260\007E\000\000\tE\000P\007E\000\220\007E\000\260\007E\000\000\tE\000P\007E\000\220\007E\000\260\007E\000\000\tE\000P\007E\000\220\007E\000\360\tE\000\000\tE\000P\007E\000\220\007E\000\360\tE\000\260\rE\000P\007E\000\220\007E\000\360\tE\000\260\rE\000@\016E\000\220\007E\000\360\tE\000\260\rE\000@\016E\000\360\017E\000\360\tE\000\260\rE\000@\016E\000\360\017E\000P\017E\000\260\r`\021E\0000\024E\000\200\023E\000P\023E\000`\021E\000\000\026E\000\200\023E\000P\023E\000`\021E\000\000\026E\000\000\026E\000P\023E\000`\021E\000\000\026E\000\000\026E\000\300\026E\000`\021E\000\000\026E\000\000\026E\000\300\026E\000 \030E\000\000\026E\000\000\026E\000\300\026E\000 \030E\000`\030E\000\000\026E\000\300\026E\000 \030E\000`\030E\000\200\025E\000\300\026E\000 \030E\000`\030E\000\200\025E\000P\025E\000 \030E\000`\030E\000\200\025E\000P\025E\000\200\023E\000`\030E\000\200\025E\000P\025E\000\200\023E\0000\022E\000\200\025E\000P\025E\000\200\023E\0000\022E\000`\020E\000P\025E\000\200\023E\0000\022E\000`\020E\000\220\021E\000\200\023E\0000\022E\000`\020E\000\220\021E\000`\017E\0000\022E\000`\020E\000\220\021E\000`\017E\000\320\014E\000`\020E\000\220\021E\000`\017E\000\320\014E\000 \016E\000\220\021E\000`\017E\000\320\014E\000 \016E\000p\016E\000`\017E\000\320\014E\000 \016E\000p\016E\000@\020E\000\320\014E\000 \016E\000p\016E\000@\020E\000\340\016E\000 \016E\000p\016E\000@\020E\000\340\016E\000\020\020E\000p\016E\000@\020E\000\340\016E\000\020\020E\000`\016E\000@\020E\000\340\016E\000\020\020E\000`\016E\000 \021E\000\340\016E\000\020\020E\000`\016E\000 \021E\000@\025E\000\020\020E\000`\016E\000 \021E\000@\025E\000\020\024E\000`rE\000\320\016E\000\220\014E\000\020\017E\000\340\rE\000\320\016E\000\220\014E\000\020\017E\000\340\rE\000\320\016E\0000\016E\000\020\017E\000\340\rE\000\320\016E\0000\016E\000\000\017E\000\340\rE\000\320\016E\0000\016E\000\000\017E\000 \020E\000\320\016E\0000\016E\000\000\017E\000 \020E\000 \017E\0000\016E\000\000\017E\000 \020E\000 \017E\000\240\017E\000\000\017E\000 \020E\000 \017E\000\240\017E\000p\017E\000 \020E\000 \017E\000\240\017E\000p\017E\000`\020E\000 \017E\000\240\017E\000p\017E\000`\020E\000\240\rE\000\240\017E\000p\017E\000`\020E\000\240\rE\000\320\013E\000p\017E\000`\020E\000\240\rE\000\320\013E\000\220\013E\000`\020E\000\240\rE\000\320\013E\000\220\013E\000\200\013E\000\240\rE\000\320\013E\000\220\013E\000\200\013E\000\320\tE\000\320\013E\000\220\013E\000\200\013E\000\320\tE\000p\010E\000\220\013E\000\200\013E\000\320\tE\000p\010E\000\340\010E\000\200\013E\000\320\tE\000p\010E\000\340\010E\000`\tE\000\320\tE\000p\010E\000\340\010E\000`\tE\000\200\010E\000p\010E\000\340\010E\000`\tE\000\200\010E\000 \tE\000\340\010E\000`\tE\000\200\010E\000 \tE\000\240\003E\000`\tE\000\200\010E\000 \tE\000\240\003E\000\360\002E\000\200\010E\000 \tE\000\240\003E\000\360\002E\000`\nE\000 \tE\000\240\003E\000\360\002E\000`\nE\000 \rE\000\240\003E\000\360\002E\000`\nE\000 \rE\000\340\nE\000\360\002E\000`\nE\000 \rE\000\340\nE\000\260\tE\000`\nE\000 \rE\000\340\nE\000\260\tE\000\220\tE\000 \rE\000\340\nE\000\260\tE\000\220\tE\000p\nE\000\340\nE\000\260\tE\000\220\tE\000p\nE\000@\016E\000\260\tE\000\220\tE\000p\nE\000@\016E\000\220\020E\000\220\tE\000p\nE\000@\016E\000\220\020E\000\000\021E\000p\n`\021E\000P\023E\000\260\022E\000\020\020E\000`\021E\000p\022E\000\260\022E\000\020\020E\000`\021E\000p\022E\000\320\020E\000\020\020E\000`\021E\000p\022E\000\320\020E\000\360\021E\000`\021E\000p\022E\000\320\020E\000\360\021E\000p\021E\000p\022E\000\320\020E\000\360\021E\000p\021E\000\240\022E\000\320\020E\000\360\021E\000p\021E\000\240\022E\000\020\021E\000\360\021E\000p\021E\000\240\022E\000\020\021E\000\220\016E\000p\021E\000\240\022E\000\020\021E\000\220\016E\0000\021E\000\240\022E\000\020\021E\000\220\016E\0000\021E\000p\024E\000\020\021E\000\220\016E\0000\021E\000p\024E\0000\025E\000\220\016E\0000\021E\000p\024E\0000\025E\000\340\023E\0000\021E\000p\024E\0000\025E\000\340\023E\000\000\023E\000p\024E\0000\025E\000\340\023E\000\000\023E\000\020\022E\0000\025E\000\340\023E\000\000\023E\000\020\022E\000`\023E\000\340\023E\000\000\023E\000\020\022E\000`\023E\000\000\023E\000\000\023E\000\020\022E\000`\023E\000\000\023E\000P\022E\000\020\022E\000`\023E\000\000\023E\000P\022E\000\220\022E\000`\023E\000\000\023E\000P\022E\000\220\022E\000\000\023E\000\000\023E\000P\022E\000\220\022E\000\000\023E\000\300\021E\000P\022E\000\220\022E\000\000\023E\000\300\021E\0000\021E\000\220\022E\000\000\023E\000\300\021E\0000\021E\000`\021E\000\000\023E\000\300\021E\0000\021E\000`\021E\000`\021E\000\300\021E\0000\021E\000`\021E\000`\021E\000\240\020E\0000\021E\000`\021E\000`\021E\000\240\020E\000\320\016E\000`\021E\000`\021E\000\240\020E\000\320\016E\0000\017E\000``\017E\000\000\020E\000 \020E\000\200\020E\000`\017E\000\240\016E\000 \020E\000\200\020E\000`\017E\000\240\016E\000`\016E\000\200\020E\000`\017E\000\240\016E\000`\016E\000\240\020E\000`\017E\000\240\016E\000`\016E\000\240\020E\000\200\016E\000\240\016E\000`\016E\000\240\020E\000\200\016E\000\200\016E\000`\016E\000\240\020E\000\200\016E\000\200\016E\000\320\rE\000\240\020E\000\200\016E\000\200\016E\000\320\rE\000P\017E\000\200\016E\000\200\016E\000\320\rE\000P\017E\000\020\016E\000\200\016E\000\320\rE\000P\017E\000\020\016E\000\000\014E\000\320\rE\000P\017E\000\020\016E\000\000\014E\000`\014E\000P\017E\000\020\016E\000\000\014E\000`\014E\000`\014E\000\020\016E\000\000\014E\000`\014E\000`\014E\000\260\013E\000\000\014E\000`\014E\000`\014E\000\260\013E\000\020\nE\000`\014E\000`\014E\000\260\013E\000\020\nE\000 \013E\000`\014E\000\260\013E\000\020\nE\000 \013E\000\320\013E\000\260\013E\000\020\nE\000 \013E\000\320\013E\0000\014E\000\020\nE\000 \013E\000\320\013E\0000\014E\000\240\rE\000 \013E\000\320\013E\0000\014E\000\240\rE\000\000\rE\000\320\013E\0000\014E\000\240\rE\000\000\rE\000\240\rE\0000\014E\000\240\rE\000\000\rE\000\240\rE\000\300\rE\000\240\rE\000\000\rE\000\240\rE\000\300\rE\000p\rE\000\000\rE\000\240\rE\000\300\rE\000p\rE\000\000\rE\000\240\rE\000\300\rE\000p\rE\000\000\rE\000\340\013E\000\300\rE\000p\rE\000\000\rE\000\340\013E\000\020\013E\000p\rE\000\000\rE\000\340\013E\000\020\013E\0000\013E\000\000\rE\000\340\013E\000\020\013E\0000\013E\000\320\014E\000\340\013E\000\020\013E\0000\013E\000\320\014E\000\340\014E\000\020\013E\0000\013E\000\320\014E\000\340\014E\000\320\013E\0000\013E\000\320\014E\000\340\014E\000\320\013E\000`\014E\000\320\014E\000\340\014E\000\320\013E\000`\014E\000 \016E\000\340\014E\000\320\013E\000`\014E\000 \016E\000@\013E\000\320\013E\000`\014E\000 \016E\000@\013E\000\020\014E\000`\014E\000 \016E\000@\013E\000\020\014E\000\260\nE\000 \016E\000@\013E\000\020\014E\000\260\nE\000\000\013E\000@\013E\000\020\014E\000\260\nE\000\000\013E\000@\013E\000\020\014E\000\260\nE\000\000\013E\000@\013E\000\200\013E\000\260\nE\000\000\013E\000@\013E\000\200\013E\0000\013E\000\000\013E\000@\013E\000\200\013E\0000\013E\000@\014E\000@\013E\000\200\013E\0000\013E\000@\014E\000\220\013E\000\200\013E\0000\013E\000@\014E\000\220\013E\000\320\nE\0000\013E\000@\014E\000\220\013E\000\320\nE\000 \013E\000@\014E\000\220\013E\000\320\nE\000 \013E\000\200\013E\000\220\013E\000\320\nE\000 \013E\000\200\013E\000\000\nE\000\320\nE\000 \013E\000\200\013E\000\000\nE\000\260\nE\000 \013E\000\200\013E\000\000\nE\000\260\nE\000P\nE\000\200\013E\000\000\nE\000\260\nE\000P\nE\000\020\nE\000\000\nE\000\260\nE\000P\nE\000\020\nE\000p\nE\000\260\nE\000P\nE\000\020\nE\000p\nE\000\220\nE\000P\nE\000\020\nE\000p\nE\000\220\nE\0000\014E\000\020\nE\000p\nE\000\220\nE\0000\014E\000@\013E\000p\nE\000\220\nE\0000\014E\000@\013E\000@\013E\000\220\np\030E\000\340\027E\000\200\026E\000\240\026E\000p\030E\000P\030E\000\200\026E\000\240\026E\000p\030E\000P\030E\0000\031E\000\240\026E\000p\030E\000P\030E\0000\031E\000`\030E\000p\030E\000P\030E\0000\031E\000`\030E\000@\031E\000P\030E\0000\031E\000`\030E\000@\031E\000P\027E\0000\031E\000`\030E\000@\031E\000P\027E\000P\031E\000`\030E\000@\031E\000P\027E\000P\031E\000\240\032E\000@\031E\000P\027E\000P\031E\000\240\032E\0000\031E\000P\027E\000P\031E\000\240\032E\0000\031E\000p\034E\000P\031E\000\240\032E\0000\031E\000p\034E\000\220\031E\000\240\032E\0000\031E\000p\034E\000\220\031E\000\240\031E\0000\031E\000p\034E\000\220\031E\000\240\031E\000\240\027E\000pp\021E\000\340\020E\000\020\021E\0000\021E\000p\021E\0000\020E\000\020\021E\0000\021E\000p\021E\0000\020E\000\200\021E\0000\021E\000p\021E\0000\020E\000\200\021E\000\220\020E\000p\021E\0000\020E\000\200\021E\000\220\020E\000\000\017E\0000\020E\000\200\021E\000\220\020E\000\000\017E\000\360\016E\000\200\021E\000\220\020E\000\000\017E\000\360\016E\000\340\016E\000\220\020E\000\000\017E\000\360\016E\000\340\016E\000@\020E\000\000\017E\000\360\016E\000\340\016E\000@\020E\0000\020E\000\360\016E\000\340\016E\000@\020E\0000\020E\000p\022E\000\340\016E\000@\020E\0000\020E\000p\022E\000\300\023E\000@\020E\0000\020E\000p\022E\000\300\023E\000p\023E\0000\020E\000p\022E\000\300\023E\000p\023E\000@\025E\000p\022E\000\300\023E\000p\023E\000@\025E\000\000\026E\000\300\023E\000p\023E\000@\025E\000\000\026E\0000\021E\000pp E\000\020!E\000\260 E\000\240!E\000p E\000 \"E\000\260 E\000\240!E\000p E\000 \"E\000\340 E\000\240!E\000p E\000 \"E\000\340 E\0000!E\000pp(E\000\000,E\000@*E\000P)E\000p(E\000`\'E\000@*E\000P)E\000p(E\000`\'E\0000)E\000P)E\000p(E\000`\'E\0000)E\000\020(E\000p(E\000`\'E\0000)E\000\020(E\000\220(E\000``%E\000\020%E\000\300$E\000\020%E\000`%E\000\200\'E\000\300$E\000\020%E\000`%E\000\200\'E\000P%E\000\020%E\000`%E\000\200\'E\000P%E\000\000\'E\000`%E\000\200\'E\000P%E\000\000\'E\000@&E\000\200\'E\000P%E\000\000\'E\000@&E\000P%E\000P%E\000\000\'E\000@&E\000P%E\000\260$E\000\000\'E\000@&E\000P%E\000\260$E\000P%E\000@&E\000P%E\000\260$E\000P%E\0000#E\000P%E\000\260$E\000P%E\0000#E\0000#E\000\260$E\000P%E\0000#E\0000#E\000` E\000P%E\0000#E\0000#E\000` E\000\360\034E\0000#E\0000#E\000` E\000\360\034E\000\340\034E\0000#E\000` E\000\360\034E\000\340\034E\000\240\033E\000` E\000\360\034E\000\340\034E\000\240\033E\0000\031E\000\360\034E\000\340\034E\000\240\033E\0000\031E\000\340\031E\000\340\034E\000\240\033E\0000\031E\000\340\031E\000P\032E\000\240\033E\0000\031E\000\340\031E\000P\032E\000\360\032E\0000\031E\000\340\031E\000P\032E\000\360\032E\000`\032E\000\340\031E\000P\032E\000\360\032E\000`\032E\000\220\033E\000P\032E\000\360\032E\000`\032E\000\220\033E\000\000\036E\000\360\032E\000`\032E\000\220\033E\000\000\036E\000p\036E\000`\032E\000\220\033E\000\000\036E\000p\036E\000\200\036E\000\220\033E\000\000\036E\000p\036E\000\200\036E\000 \036E\000\000\036E\000p\036E\000\200\036E\000 \036E\000\320\037E\000p\036E\000\200\036E\000 \036E\000\320\037E\000\200\037E\000\200\036E\000 \036E\000\320\037E\000\200\037E\000\020\037E\000 \036E\000\320\037E\000\200\037E\000\020\037E\000\360!E\000\320\037E\000\200\037E\000\020\037E\000\360!E\000\300 E\000\200\037E\000\020\037E\000\360!E\000\300 E\000p\"E\000\020\037E\000\360!E\000\300 E\000p\"E\000\320!E\000\360!E\000\300 E\000p\"E\000\320!E\000p\"E\000\300 E\000p\"E\000\320!E\000p\"E\000\000#E\000p\"E\000\320!E\000p\"E\000\000#E\000\360\"E\000\320!E\000p\"E\000\000#E\000\360\"E\000P#E\000p`\037E\000\360 E\000\360 E\000\260\037E\000`\037E\000\000\035E\000\360 E\000\260\037E\000`\037E\000\000\035E\000\360\036E\000\260\037E\000`\037E\000\000\035E\000\360\036E\000\320\035E\000`\037E\000\000\035E\000\360\036E\000\320\035E\0000\033E\000\000\035E\000\360\036E\000\320\035E\0000\033E\000\240\033E\000\360\036E\000\320\035E\0000\033E\000\240\033E\000 \033E\000\320\035E\0000\033E\000\240\033E\000 \033E\000 \037E\0000\033E\000\240\033E\000 \033E\000 \037E\000\000\036E\000\240\033E\000 \033E\000 \037E\000\000\036E\000`\034E\000 \033E\000 \037E\000\000\036E\000`\034E\000\020\035E\000 \037E\000\000\036E\000`\034E\000\020\035E\000\260!E\000\000\036E\000`\034E\000\020\035E\000\260!E\000\340 E\000`\034E\000\020\035E\000\260!E\000\340 E\000p\036E\000\020\035E\000\260!E\000\340 E\000p\036E\000\300\037E\000\260!E\000\340 E\000p\036E\000\300\037E\000\220\037E\000\340 E\000p\036E\000\300\037E\000\220\037E\0000 E\000p\036E\000\300\037E\000\220\037E\0000 E\000`&E\000\300\037E\000\220\037E\0000 E\000`&E\000\020$E\000\220\037E\0000 E\000`&E\000\020$E\000 #E\0000 E\000`&E\000\020$E\000 #E\000\240#E\000`&E\000\020$E\000 #E\000\240#E\000\320#E\000\020$E\000 #E\000\240#E\000\320#E\0000 E\000 #E\000\240#E\000\320#E\0000 E\000@ E\000\240#E\000\320#E\0000 E\000@ E\000p$E\000\320#E\0000 E\000@ E\000p$E\000\000)E\0000 E\000@ E\000p$E\000\000)E\000\260(E\000@ E\000p$E\000\000)E\000\260(E\000\260(E\000p$E\000\000)E\000\260(E\000\260(E\000\360#E\000\000)E\000\260(E\000\260(E\000\360#E\000\300!E\000\260(E\000\260(E\000\360#E\000\300!E\000`$E\000\260(E\000\360#E\000\300!E\000`$E\0000\"E\000\360#E\000\300!E\000`$E\0000\"E\000\000 E\000\300!E\000`$E\0000\"E\000\000 E\000@ E\000``DE\000\300@E\000\240EE\000\020DE\000`DE\000\260AE\000\240EE\000\020DE\000`DE\000\260AE\000PBE\000\020DE\000`DE\000\260AE\000PBE\000@GE\000`DE\000\260AE\000PBE\000@GE\000pJE\000\260AE\000PBE\000@GE\000pJE\000\220HE\000PBE\000@GE\000pJE\000\220HE\000\000GE\000@GE\000pJE\000\220HE\000\000GE\0000FE\000pJE\000\220HE\000\000GE\0000FE\000\340CE\000\220HE\000\000GE\0000FE\000\340CE\000pDE\000\000GE\0000FE\000\340CE\000pDE\000\000HE\0000FE\000\340CE\000pDE\000\000HE\000\340IE\000\340CE\000pDE\000\000HE\000\340IE\000\200IE\000pDE\000\000HE\000\340IE\000\200IE\000@AE\000\000HE\000\340IE\000\200IE\000@AE\000\020BE\000\340IE\000\200IE\000@AE\000\020BE\000 GE\000\200IE\000@AE\000\020BE\000 GE\000\220EE\000@AE\000\020BE\000 GE\000\220EE\000\020GE\000\020BE\000 GE\000\220EE\000\020GE\000pJE\000 GE\000\220EE\000\020GE\000pJE\000\340JE\000\220EE\000\020GE\000pJE\000\340JE\0000HE\000\020GE\000pJE\000\340JE\0000HE\0000KE\000pJE\000\340JE\0000HE\0000KE\0000ME\000\340JE\0000HE\0000KE\0000ME\000\260HE\0000HE\0000KE\0000ME\000\260HE\000\320LE\0000KE\0000ME\000\260HE\000\320LE\000@LE\0000ME\000\260HE\000\320LE\000@LE\000\300JE\000\260HE\000\320LE\000@LE\000\300JE\000\320ME\000\320LE\000@LE\000\300JE\000\320ME\000 QE\000@LE\000\300JE\000\320ME\000 QE\000\220PE\000\300JE\000\320ME\000 QE\000\220PE\000POE\000\320ME\000 QE\000\220PE\000POE\000`PE\000 QE\000\220PE\000POE\000`PE\000PME\000\220PE\000POE\000`PE\000PME\000\320LE\000POE\000`PE\000PME\000\320LE\000pQE\000`PE\000PME\000\320LE\000pQE\000\240QE\000PME\000\320LE\000pQE\000\240QE\000\340QE\000\320LE\000pQE\000\240QE\000\340QE\000\320SE\000pQE\000\240QE\000\340QE\000\320SE\000\000UE\000\240QE\000\340QE\000\320SE\000\000UE\000pXE\000\340QE\000\320SE\000\000UE\000pXE\000\320YE\000\320SE\000\000UE\000pXE\000\320YE\000@[E\000\000UE\000pXE\000\320YE\000@[E\000 ]E\000pXE\000\320YE\000@[E\000 ]E\000\260XE\000\320YE\000@[E\000 ]E\000\260XE\000\220SE\000@[E\000 ]E\000\260XE\000\220SE\000`TE\000 ]E\000\260XE\000\220SE\000`TE\000\340UE\000\260XE\000\220SE\000`TE\000\340UE\000`PE\000\220SE\000`TE\000\340UE\000`PE\000\360RE\000`TE\000\340UE\000`PE\000\360RE\000POE\000\340UE\000`PE\000\360RE\000POE\000 JE\000`PE\000\360RE\000POE\000 JE\000@IE\000\360RE\000POE\000 JE\000@IE\000\220CE\000POE\000 JE\000@IE\000\220CE\000 CE\000 JE\000@IE\000\220CE\000 CE\000PBE\000@IE\000\220CE\000 CE\000PBE\000PGE\000\220CE\000 CE\000PBE\000PGE\000\320DE\000 CE\000PBE\000PGE\000\320DE\000 JE\000PBE\000PGE\000\320DE\000 JE\000\200PE\000PGE\000\320DE\000 JE\000\200PE\000\240PE\000\320DE\000 JE\000\200PE\000\240PE\000\020NE\000 JE\000\200PE\000\240PE\000\020NE\000 RE\000\200PE\000\240PE\000\020NE\000 RE\000\360RE\000\240PE\000\020NE\000 RE\000\360RE\000 TE\000\020NE\000 RE\000\360RE\000 TE\000@NE\000 RE\000\360RE\000 TE\000@NE\000\260NE\000\360RE\000 TE\000@NE\000\260NE\000\260NE\000 TE\000@NE\000\260NE\000\260NE\000\360ME\000@NE\000\260NE\000\260NE\000\360ME\000\020OE\000\260NE\000\260NE\000\360ME\000\020OE\000\300OE\000\260NE\000\360ME\000\020OE\000\300OE\000\240SE\000\360ME\000\020OE\000\300OE\000\240SE\000\240RE\000\020OE\000\300OE\000\240SE\000\240RE\000@UE\000\300OE\000\240SE\000\240RE\000@UE\000@UE\000\240SE\000\240RE\000@UE\000@UE\000@UE\000\240RE\000@UE\000@UE\000@UE\000\000UE\000@UE\000@UE\000@UE\000\000UE\000 WE\000@UE\000@UE\000\000UE\000 WE\000\320VE\000@UE\000\000UE\000 WE\000\320VE\000\340VE\000\000UE\000 WE\000\320VE\000\340VE\000`UE\000 WE\000\320VE\000\340VE\000`UE\000\240WE\000\320VE\000\340VE\000`UE\000\240WE\000 VE\000\340VE\000`UE\000\240WE\000 VE\000pXE\000`UE\000\240WE\000 VE\000pXE\000@_E\000\240WE\000 VE\000pXE\000@_E\000`[E\000 VE\000pXE\000@_E\000`[E\000\200VE\000pXE\000@_E\000`[E\000\200VE\000\240VE\000@_E\000`[E\000\200VE\000\240VE\000\300NE\000`[E\000\200VE\000\240VE\000\300NE\000\320PE\000\200VE\000\240VE\000\300NE\000\320PE\000\220HE\000\240VE\000\300NE\000\320PE\000\220HE\000\000LE\000\300NE\000\320PE\000\220HE\000\000LE\000@IE\000\320PE\000\220HE\000\000LE\000@IE\000\020ME\000\220HE\000\000LE\000@IE\000\020ME\000@ME\000\000LE\000@IE\000\020ME\000@ME\000`OE\000@IE\000\020ME\000@ME\000`OE\000pLE\000\020ME\000@ME\000`OE\000pLE\000\360ME\000@ME\000`OE\000pLE\000\360ME\000PPE\000`OE\000pLE\000\360ME\000PPE\000\320RE\000pLE\000\360ME\000PPE\000\320RE\000\260QE\000\360ME\000PPE\000\320RE\000\260QE\000pYE\000PPE\000\320RE\000\260QE\000pYE\000\300YE\000\320RE\000\260QE\000pYE\000\300YE\000\300`E\000\260QE\000pYE\000\300YE\000\300`E\000P_E\000pYE\000\300YE\000\300`E\000P_E\0000\\E\000\300YE\000\300`E\000P_E\0000\\E\000\300`E\000\300`E\000P_E\0000\\E\000\300`E\000\300]E\000P_E\0000\\E\000\300`E\000\300]E\000@bE\0000\\E\000\300`E\000\300]E\000@bE\000 ]E\000\300`E\000\300]E\000@bE\000 ]E\000\340]E\000\300]E\000@bE\000 ]E\000\340]E\000\020]E\000@bE\000 ]E\000\340]E\000\020]E\000\020cE\000 ]E\000\340]E\000\020]E\000\020cE\000\000jE\000\340]E\000\020]E\000\020cE\000\000jE\000`aE\000\020]E\000\020cE\000\000jE\000`aE\000\360^E\000\020cE\000\000jE\000`aE\000\360^E\000PeE\000\000jE\000`aE\000\360^E\000PeE\000\200`E\000`aE\000\360^E\000PeE\000\200`E\000\220WE\000\360^E\000PeE\000\200`E\000\220WE\0000]E\000PeE\000\200`E\000\220WE\0000]E\000\240WE\000\200`E\000\220WE\0000]E\000\240WE\000p[E\000\220WE\0000]E\000\240WE\000p[E\000\340ZE\0000]E\000\240WE\000p[E\000\340ZE\000 VE\000\240WE\000p[E\000\340ZE\000 VE\000\000NE\000p[E\000\340ZE\000 VE\000\000NE\000 PE\000\340ZE\000 VE\000\000NE\000 PE\000\020HE\000 VE\000\000NE\000 PE\000\020HE\000\320DE\000\000NE\000 PE\000\020HE\000\320DE\000\020HE\000 PE\000\020HE\000\320DE\000\020HE\000\240ME\000\020HE\000\320DE\000\020HE\000\240ME\000`OE\000\320DE\000\020HE\000\240ME\000`OE\000\200LE\000\020HE\000\240ME\000`OE\000\200LE\000\360IE\000\240ME\000`OE\000\200LE\000\360IE\000 JE\000``RE\000\020LE\000\020OE\000\200TE\000`RE\000PQE\000\020OE\000\200TE\000`RE\000PQE\000pUE\000\200TE\000`RE\000PQE\000pUE\000\300NE\000`RE\000PQE\000pUE\000\300NE\000 ME\000PQE\000pUE\000\300NE\000 ME\000 TE\000paE\000\200WE\000\360^E\000\220^E\000\000aE\000\020aE\000\360^E\000\220^E\000\000aE\000\020aE\000\020cE\000\220^E\000\000aE\000\020aE\000\020cE\000\220bE\000\000aE\000\020aE\000\020cE\000\220bE\000pdE\000\020aE\000\020cE\000\220bE\000pdE\000\200cE\000\020cE\000\220bE\000pdE\000\200cE\000\260eE\000\220bE\000pdE\000\200cE\000\260eE\000\360eE\000pdE\000\200cE\000\260eE\000\360eE\000@kE\000\200cE\000\260eE\000\360eE\000@kE\000\320hE\000\260eE\000\360eE\000@kE\000\320hE\000`iE\000\360eE\000@kE\000\320hE\000`iE\0000iE\000@kE\000\320hE\000`iE\0000iE\000\360dE\000\320hE\000`iE\0000iE\000\360dE\000\300gE\000`iE\0000iE\000\360dE\000\300gE\000\260bE\0000iE\000\360dE\000\300gE\000\260bE\000\000fE\000\360dE\000\300gE\000\260bE\000\000fE\000@jE\000\300gE\000\260bE\000\000fE\000@jE\000\360qE\000\260bE\000\000fE\000@jE\000\360qE\000\360qE\000\000fE\000@jE\000\360qE\000\360qE\000\240vE\000@jE\000\360qE\000\360qE\000\240vE\000`yE\000\360qE\000\360qE\000\240vE\000`yE\000\300}E\000\360qE\000\240vE\000`yE\000\300}E\0000|E\000\240vE\000`yE\000\300}E\0000|E\0008\203E\000`yE\000\300}E\0000|E\0008\203E\000\220\203E\000\300}E\0000|E\0008\203E\000\220\203E\000\350\204E\0000|E\0008\203E\000\220\203E\000\350\204E\000X\204E\0008\203E\000\220\203E\000\350\204E\000X\204E\000\030\203E\000\220\203E\000\350\204E\000X\204E\000\030\203E\000\250\201E\000\350\204E\000X\204E\000\030\203E\000\250\201E\000\000sE\000X\204E\000\030\203E\000\250\201E\000\000sE\000\300xE\000\030\203E\000\250\201E\000\000sE\000\300xE\0000zE\000\250\201E\000\000sE\000\300xE\0000zE\000\220\201E\000\000sE\000\300xE\0000zE\000\220\201E\000\020}E\000\300xE\0000zE\000\220\201E\000\020}E\000\320\177E\0000zE\000\220\201E\000\020}E\000\320\177E\000\020\203E\000\220\201E\000\020}E\000\320\177E\000\020\203E\000\200\177E\000\020}E\000\320\177E\000\020\203E\000\200\177E\000\030\204E\000\320\177E\000\020\203E\000\200\177E\000\030\204E\000\240\177E\000\020\203E\000\200\177E\000\030\204E\000\240\177E\000\300sE\000\200\177E\000\030\204E\000\240\177E\000\300sE\000@vE\000\030\204E\000\240\177E\000\300sE\000@vE\000`vE\000\240\177E\000\300sE\000@vE\000`vE\000\300|E\000\300sE\000@vE\000`vE\000\300|E\000\260wE\000@vE\000`vE\000\300|E\000\260wE\000 zE\000`vE\000\300|E\000\260wE\000 zE\0000vE\000\300|E\000\260wE\000 zE\0000vE\000\300xE\000\260wE\000 zE\0000vE\000\300xE\000PuE\000 zE\0000vE\000\300xE\000PuE\000@lE\0000vE\000\300xE\000PuE\000@lE\000\240nE\000\300xE\000PuE\000@lE\000\240nE\000\240hE\000PuE\000@lE\000\240nE\000\240hE\0000jE\000@lE\000\240nE\000\240hE\0000jE\000\340hE\000\240nE\000\240hE\0000jE\000\340hE\000\000mE\000\240hE\0000jE\000\340hE\000\000mE\000\000fE\0000jE\000\340hE\000\000mE\000\000fE\000\220iE\000\340hE\000\000mE\000\000fE\000\220iE\000@jE\000\000mE\000\000fE\000\220iE\000@jE\000`cE\000\000fE\000\220iE\000@jE\000`cE\000\220[E\000\220iE\000@jE\000`cE\000\220[E\000\300QE\000@jE\000`cE\000\220[E\000\300QE\000`QE\000`cE\000\220[E\000\300QE\000`QE\000pSE\000\220[E\000\300QE\000`QE\000pSE\000 PE\000\300QE\000`QE\000pSE\000 PE\000\200FE\000`QE\000pSE\000 PE\000\200FE\000\020ME\000pSE\000 PE\000\200FE\000\020ME\000\000UE\000 PE\000\200FE\000\020ME\000\000UE\000 ZE\000\200FE\000\020ME\000\000UE\000 ZE\000 QE\000\020ME\000\000UE\000 ZE\000 QE\000 \\E\000\000UE\000 ZE\000 QE\000 \\E\000PZE\000 ZE\000 QE\000 \\E\000PZE\000 `E\000 QE\000 \\E\000PZE\000 `E\000\000_E\000 \\E\000PZE\000 `E\000\000_E\000@_E\000PZE\000 `E\000\000_E\000@_E\000\020fE\000 `E\000\000_E\000@_E\000\020fE\000\340_E\000\000_E\000@_E\000\020fE\000\340_E\000 gE\000@_E\000\020fE\000\340_E\000 gE\000`eE\000\020fE\000\340_E\000 gE\000`eE\000\340cE\000\340_E\000 gE\000`eE\000\340cE\000\240fE\000 gE\000`eE\000\340cE\000\240fE\000\340^E\000`eE\000\340cE\000\240fE\000\340^E\000 _E\000\340cE\000\240fE\000\340^E\000 _E\000\340[E\000\240fp\036E\000\240)E\000\260-E\000\200\'E\000p\036E\000\220(E\000\260-E\000\200\'E\000p\036E\000\220(E\000\020.E\000\200\'E\000p\036E\000\220(E\000\020.E\000P*E\000p\036E\000\220(E\000\020.E\000P*E\000\260%E\000\220(E\000\020.E\000P*E\000\260%E\000\300(E\000\020.E\000P*E\000\260%E\000\300(E\000p*E\000P*E\000\260%E\000\300(E\000p*E\000\240(E\000\260%E\000\300(E\000p*E\000\240(E\000@3E\000\300(E\000p*E\000\240(E\000@3E\000\2401E\000pp\034E\000\300\036E\000@\036E\000\260\036E\000p\034E\000\020\037E\000@\036E\000\260\036E\000p\034E\000\020\037E\000P\033E\000\260\036E\000p\034E\000\020\037E\000P\033E\000\360\024E\000p\034E\000\020\037E\000P\033E\000\360\024E\000\340\023E\000\020\037E\000P\033E\000\360\024E\000\340\023E\000\320\024E\000P\033E\000\360\024E\000\340\023E\000\320\024E\000\320\024E\000\360\024E\000\340\023E\000\320\024E\000\320\024E\000\000\025E\000\340\023E\000\320\024E\000\320\024E\000\000\025E\000p\021E\000\320\024E\000\320\024E\000\000\025E\000p\021E\000\360\020E\000\320\024E\000\000\025E\000p\021E\000\360\020E\000\020\014E\000\000\025E\000p\021E\000\360\020E\000\020\014E\000p\013E\000p\021E\000\360\020E\000\020\014E\000p\013E\000`\nE\000\360\020E\000\020\014E\000p\013E\000`\nE\000p\005E\000\020\014E\000p\013E\000`\nE\000p\005E\000\340\010E\000p\013E\000`\nE\000p\005E\000\340\010E\000P\006E\000`\nE\000p\005E\000\340\010E\000P\006E\000@\010E\000p\005E\000\340\010E\000P\006E\000@\010E\0000\010E\000\340\010E\000P\006E\000@\010E\0000\010E\000\200\010E\000P\006E\000@\010E\0000\010E\000\200\010E\000\260\016E\000@\010E\0000\010E\000\200\010E\000\260\016E\0000\016E\0000\010E\000\200\010E\000\260\016E\0000\016E\000\000\020E\000\200\010E\000\260\016E\0000\016E\000\000\020E\000\020\017E\000\260\016E\0000\016E\000\000\020E\000\020\017E\000p\014E\0000\016E\000\000\020E\000\020\017E\000p\014E\000`\020E\000\000\020E\000\020\017E\000p\014E\000`\020E\0000\017E\000\020\017E\000p\014E\000`\020E\0000\017E\000 \021E\000p\014E\000`\020E\0000\017E\000 \021E\000\300\021E\000`\020E\0000\017E\000 \021E\000\300\021E\0000\022E\0000\017E\000 \021E\000\300\021E\0000\022E\000p\030E\000 \021E\000\300\021E\0000\022E\000p\030E\000`\030E\000\300\021E\0000\022E\000p\030E\000`\030E\000\360\032E\0000\022E\000p\030E\000`\030E\000\360\032E\000\200 E\000p\030E\000`\030E\000\360\032E\000\200 E\000\020#E\000``1E\000\000)E\000\260(E\000\240/E\000`1E\000\3200E\000\260(E\000\240/E\000`1E\000\3200E\000\240-E\000\240/E\000`1E\000\3200E\000\240-E\000\0200E\000`1E\000\3200E\000\240-E\000\0200E\000\3200E\000\3200E\000\240-E\000\0200E\000\3200E\000\220(E\000\240-E\000\0200E\000\3200E\000\220(E\0000&E\000\0200E\000\3200E\000\220(E\0000&E\000@\037E\000\3200E\000\220(E\0000&E\000@\037E\000\360 E\000\220(E\0000&E\000@\037E\000\360 E\000@ E\0000&E\000@\037E\000\360 E\000@ E\000\220!E\000@\037E\000\360 E\000@ E\000\220!E\000@\034E\000\360 E\000@ E\000\220!E\000@\034E\000`\036E\000@ E\000\220!E\000@\034E\000`\036E\000P\034E\000\220!E\000@\034E\000`\036E\000P\034E\000\340\025E\000@\034E\000`\036E\000P\034E\000\340\025E\000\360\030E\000`\036E\000P\034E\000\340\025E\000\360\030E\000\360\027E\000P\034E\000\340\025E\000\360\030E\000\360\027E\000\000\034E\000\340\025E\000\360\030E\000\360\027E\000\000\034E\000P\032E\000\360\030E\000\360\027E\000\000\034E\000P\032E\000\020\033E\000\360\027E\000\000\034E\000P\032E\000\020\033E\000p\033E\000\000\034E\000P\032E\000\020\033E\000p\033E\000\360\035E\000P\032E\000\020\033E\000p\033E\000\360\035E\000P\034E\000\020\033E\000p\033E\000\360\035E\000P\034E\000\000\035E\000pp$E\000\360*E\000\300+E\000\320&E\000p$E\000@&E\000\300+E\000\320&E\000p$E\000@&E\000`+E\000\320&E\000p$E\000@&E\000`+E\000\220-E\000p$E\000@&E\000`+E\000\220-E\000\240-E\000@&E\000`+E\000\220-E\000\240-E\000\2603E\000`+E\000\220-E\000\240-E\000\2603E\000`1E\000\220-E\000\240-E\000\2603E\000`1E\000\3206E\000\240-E\000\2603E\000`1E\000\3206E\000\2606E\000\2603E\000`1E\000\3206E\000\2606E\000\0203E\000`1E\000\3206E\000\2606E\000\0203E\000`2E\000\3206E\000\2606E\000\0203E\000`2E\000\0203E\000\2606E\000\0203E\000`2E\000\0203E\000\2006E\000\0203E\000`2E\000\0203E\000\2006E\000\3407E\000`2E\000\0203E\000\2006E\000\3407E\000\2002E\000\0203E\000\2006E\000\3407E\000\2002E\000\220.E\000\2006E\000\3407E\000\2002E\000\220.E\000\2200E\000\3407E\000\2002E\000\220.E\000\2200E\000\360/E\000\2002E\000\220.E\000\2200E\000\360/E\000`+E\000\220.E\000\2200E\000\360/E\000`+E\000\200$E\000\2200E\000\360/E\000`+E\000\200$E\000 #E\000\360/E\000`+E\000\200$E\000 #E\000`&E\000`+E\000\200$E\000 #E\000`&E\000\000*E\000\200$E\000 #E\000`&E\000\000*E\000\000*E\000 #E\000`&E\000\000*E\000\000*E\000 2E\000`&E\000\000*E\000\000*E\000 2E\000\2000E\000\000*E\000\000*E\000 2E\000\2000E\000\3003E\000\000*E\000 2E\000\2000E\000\3003E\000\3002E\000 2E\000\2000E\000\3003E\000\3002E\000\2602E\000\2000E\000\3003E\000\3002E\000\2602E\000\360*E\000\3003E\000\3002E\000\2602E\000\360*E\000@.E\000\3002E\000\2602E\000\360*E\000@.E\000\3200E\000\2602E\000\360*E\000@.E\000\3200E\000\0001E\000\360*E\000@.E\000\3200E\000\0001E\000\3404E\000@.E\000\3200E\000\0001E\000\3404E\000p2E\000\3200E\000\0001E\000\3404E\000p2E\000@6E\000\0001E\000\3404E\000p2E\000@6E\000\2406E\000\3404E\000p2E\000@6E\000\2406E\000\3406E\000p2E\000@6E\000\2406E\000\3406E\000P9E\000@6E\000\2406E\000\3406E\000P9E\000\0009E\000\2406E\000\3406E\000P9E\000\0009E\000p1E\000\3406E\000P9E\000\0009E\000p1E\000\3402E\000P9E\000\0009E\000p1E\000\3402E\000\2207E\000\0009E\000p1E\000\3402E\000\2207E\000\300BE\000p1E\000\3402E\000\2207E\000\300BE\000`GE\000\3402E\000\2207E\000\300BE\000`GE\000\300<E\000\2207E\000\300BE\000`GE\000\300<E\000p>E\000\300BE\000`GE\000\300<E\000p>E\000`<E\000`GE\000\300<E\000p>E\000`<E\000\200;E\000\300<E\000p>E\000`<E\000\200;E\000\0209E\000p>E\000`<E\000\200;E\000\0209E\000\3608E\000`<E\000\200;E\000\0209E\000\3608E\000 6E\000\200;E\000\0209E\000\3608E\000 6E\000P6E\000\0209E\000\3608E\000 6E\000P6E\000`6E\000\3608E\000 6E\000P6E\000`6E\000\3605E\000 6E\000P6E\000`6E\000\3605E\000\2005E\000P6E\000`6E\000\3605E\000\2005E\000P6E\000`6E\000\3605E\000\2005E\000P6E\000\0201E\000\3605E\000\2005E\000P6E\000\0201E\000\3002E\000\2005E\000P6E\000\0201E\000\3002E\000\3401E\000P6E\000\0201E\000\3002E\000\3401E\00003E\000\0201E\000\3002E\000\3401E\00003E\000@6E\000\3002E\000\3401E\00003E\000@6E\000@4E\000\3401E\00003E\000@6E\000@4E\000\2004E\00003E\000@6E\000@4E\000\2004E\000p9E\000@6E\000@4E\000\2004E\000p9E\000P8E\000@4E\000\2004E\000p9E\000P8E\000\3206E\000\2004E\000p9E\000P8E\000\3206E\000\3203E\000p9E\000P8E\000\3206E\000\3203E\000\2004E\000P8E\000\3206E\000\3203E\000\2004E\000\360,E\000\3206E\000\3203E\000\2004E\000\360,E\000\200-E\000\3203E\000\2004E\000\360,E\000\200-E\000\340/E\000\2004E\000\360,E\000\200-E\000\340/E\000\340-E\000\360,E\000\200-E\000\340/E\000\340-E\000\240.E\000\200-E\000\340/E\000\340-E\000\240.E\000\3000E\000\340/E\000\340-E\000\240.E\000\3000E\000`.E\000\340-E\000\240.E\000\3000E\000`.E\000\320-E\000\240.E\000\3000E\000`.E\000\320-E\000\2602E\000\3000E\000`.E\000\320-E\000\2602E\000\0001E\000`p1E\000\2401E\000\320-E\000\0001E\000p1E\000P6E\000\320-E\000\0001E\000p1E\000P6E\000 5E\000\0001E\000p1E\000P6E\000 5E\000\0006E\000p1E\000P6E\000 5E\000\0006E\000\2204E\000P6E\000 5E\000\0006E\000\2204E\000\3207E\000 5E\000\0006E\000\2204E\000\3207E\00004E\000\0006E\000\2204E\000\3207E\00004E\000\3603E\000\2204E\000\3207E\00004E\000\3603E\000\300,E\000\3207E\00004E\000\3603E\000\300,E\000P/E\00004E\000\3603E\000\300,E\000P/E\000`,E\000\3603E\000\300,E\000P/E\000`,E\000\360*E\000\300,E\000P/E\000`,E\000\360*E\000\020.E\000P/E\000`,E\000\360*E\000\020.E\000`-E\000`,E\000\360*E\000\020.E\000`-E\000\200-E\000\360*E\000\020.E\000`-E\000\200-E\000\240+E\000\020.E\000`-E\000\200-E\000\240+E\000\320(E\000`-E\000\200-E\000\240+E\000\320(E\000p)E\000\200-E\000\240+E\000\320(E\000p)E\000 .E\000\240+E\000\320(E\000p)E\000 .E\000\240/E\000\320(E\000p)E\000 .E\000\240/E\000`.E\000p)E\000 .E\000\240/E\000`.E\000\200-E\000 .E\000\240/E\000`.E\000\200-E\000`,E\000\240/E\000`.E\000\200-E\000`,E\000 +E\000`.E\000\200-E\000`,E\000 +E\000P)E\000\200-E\000`,E\000 +E\000P)E\000P)E\000`,E\000 +E\000P)E\000P)E\000p\'E\000 +E\000P)E\000P)E\000p\'E\000\360(E\000P)E\000P)E\000p\'E\000\360(E\000\020)E\000P)E\000p\'E\000\360(E\000\020)E\000p,E\000p\'E\000\360(E\000\020)E\000p,E\000\2601E\000\360(E\000\020)E\000p,E\000\2601E\000`0E\000\020)E\000p,E\000\2601E\000`0E\000\0203E\000p,E\000\2601E\000`0E\000\0203E\000\0202E\000\2601E\000`0E\000\0203E\000\0202E\00003E\000`0E\000\0203E\000\0202E\00003E\000 3E\000\0203E\000\0202E\00003E\000 3E\000\3601E\000\0202E\00003E\000 3E\000\3601E\000\3601E\00003E\000 3E\000\3601E\000\3601E\000P1E\000 3E\000\3601E\000\3601E\000P1E\000\3003E\000\3601E\000\3601E\000P1E\000\3003E\000p4E\000\3601E\000P1E\000\3003E\000p4E\000\3401E\000P1E\000\3003E\000p4E\000\3401E\000\240/E\000\3003E\000p4E\000\3401E\000\240/E\0000/E\000p4E\000\3401E\000\240/E\0000/E\000\320/E\000\3401E\000\240/E\0000/E\000\320/E\000 0E\000\240/E\0000/E\000\320/E\000 0E\000\2001E\0000/E\000\320/E\000 0E\000\2001E\000P2E\000\320/E\000 0E\000\2001E\000P2E\000\2002E\000 0E\000\2001E\000P2E\000\2002E\000p2E\000\2001E\000P2E\000\2002E\000p2E\000\2602E\000P2E\000\2002E\000p2E\000\2602E\000`.E\000\2002E\000p2E\000\2602E\000`.E\000P/E\000p2E\000\2602E\000`.E\000P/E\000\3605E\000\2602E\000`.E\000P/E\000\3605E\000\2406E\000`.E\000P/E\000\3605E\000\2406E\000\3202E\000P/E\000\3605E\000\2406E\000\3202E\00002E\000\3605E\000\2406E\000\3202E\00002E\000\3604E\000\2406E\000\3202E\00002E\000\3604E\000 7E\000\3202E\00002E\000\3604E\000 7E\000 8E\00002E\000\3604E\000 7E\000 8E\000`;E\000\3604E\000 7E\000 8E\000`;E\000\2408E\000 7E\000 8E\000`;E\000\2408E\000\320:E\000 8E\000`;E\000\2408E\000\320:E\000p;E\000`;E\000\2408E\000\320:E\000p;E\000\2405E\000\2408E\000\320:E\000p;E\000\2405E\000`<E\000\320:E\000p;E\000\2405E\000`<E\000\360<E\000p;E\000\2405E\000`<E\000\360<E\000\320<E\000\2405E\000`<E\000\360<E\000\320<E\000\360;E\000`<E\000\360<E\000\320<E\000\360;E\000p=E\000\360<E\000\320<E\000\360;E\000p=E\000@?E\000\320<E\000\360;E\000p=E\000@?E\000@?E\000\360;E\000p=E\000@?E\000@?E\000@:E\000p=E\000@?E\000@?E\000@:E\00008E\000@?E\000@?E\000@:E\00008E\000`8E\000@?E\000@:E\00008E\000`8E\000\2407E\000@:E\00008E\000`8E\000\2407E\000P:E\00008E\000`8E\000\2407E\000P:E\000\360;E\000`8E\000\2407E\000P:E\000\360;E\000\260;E\000\2407E\000P:E\000\360;E\000\260;E\000 9E\000P:E\000\360;E\000\260;E\000 9E\000P9E\000\360;E\000\260;E\000 9E\000P9E\000p8E\000\260;E\000 9E\000P9E\000p8E\000\0008E\000 9E\000P9E\000p8E\000\0008E\000\3209E\000P9E\000p8E\000\0008E\000\3209E\000\2209E\000p`4E\000\2608E\000P3E\000\0204E\000`4E\000\2005E\000P3E\000\0204E\000`4E\000\2005E\000\3405E\000\0204E\000`4E\000\2005E\000\3405E\000`3E\000`4E\000\2005E\000\3405E\000`3E\000P4E\000\2005E\000\3405E\000`3E\000P4E\000`3E\000\3405E\000`3E\000P4E\000`3E\000`3E\000`3E\000P4E\000`3E\000`3E\000\2601E\000P4E\000`3E\000`3E\000\2601E\000@2E\000`3E\000`3E\000\2601E\000@2E\000p/E\000`3E\000\2601E\000@2E\000p/E\000@.E\000\2601E\000@2E\000p/E\000@.E\000\020*E\000@2E\000p/E\000@.E\000\020*E\000\240(E\000p/E\000@.E\000\020*E\000\240(E\000`+E\000@.E\000\020*E\000\240(E\000`+E\000\340)E\000\020*E\000\240(E\000`+E\000\340)E\000\240*E\000\240(E\000`+E\000\340)E\000\240*E\000@,E\000`+E\000\340)E\000\240*E\000@,E\000`,E\000\340)E\000\240*E\000@,E\000`,E\000`+E\000\240*E\000@,E\000`,E\000`+E\000\300-E\000@,E\000`,E\000`+E\000\300-E\000\200-E\000`,E\000`+E\000\300-E\000\200-E\000\320/E\000`+E\000\300-E\000\200-E\000\320/E\000@3E\000\300-E\000\200-E\000\320/E\000@3E\000`2E\000\200-E\000\320/E\000@3E\000`2E\000\0001E\000\320/E\000@3E\000`2E\000\0001E\000\340/E\000@3E\000`2E\000\0001E\000\340/E\00002E\000``.E\000\320+E\000\200.E\000\340.E\000`.E\000\0201E\000\200.E\000\340.E\000`.E\000\0201E\000\3000E\000\340.E\000`.E\000\0201E\000\3000E\000\2600E\000`.E\000\0201E\000\3000E\000\2600E\000\320/E\000\0201E\000\3000E\000\2600E\000\320/E\000\2000E\000\3000E\000\2600E\000\320/E\000\2000E\000\340/E\000\2600E\000\320/E\000\2000E\000\340/E\000\0001E\000\320/E\000\2000E\000\340/E\000\0001E\000\3001E\000\2000E\000\340/E\000\0001E\000\3001E\000\0202E\000\340/E\000\0001E\000\3001E\000\0202E\000 0E\000\0001E\000\3001E\000\0202E\000 0E\000\3400E\000\3001E\000\0202E\000 0E\000\3400E\000p0E\000\0202E\000 0E\000\3400E\000p0E\000\2001E\000 0E\000\3400E\000p0E\000\2001E\000\2400E\000\3400E\000p0E\000\2001E\000\2400E\000\3200E\000p0E\000\2001E\000\2400E\000\3200E\000P2E\000\2001E\000\2400E\000\3200E\000P2E\000`3E\000\2400E\000\3200E\000P2E\000`3E\00003E\000\3200E\000P2E\000`3E\00003E\000\3602E\000P2E\000`3E\00003E\000\3602E\000\0204E\000`3E\00003E\000\3602E\000\0204E\000P2E\00003E\000\3602E\000\0204E\000P2E\000\0205E\000\3602E\000\0204E\000P2E\000\0205E\000\3004E\000\0204E\000P2E\000\0205E\000\3004E\000\3204E\000P2E\000\0205E\000\3004E\000\3204E\000p6E\000\0205E\000\3004E\000\3204E\000p6E\000\2207E\000\3004E\000\3204E\000p6E\000\2207E\000 7E\000\3204E\000p6E\000\2207E\000 7E\000p5E\000p6E\000\2207E\000 7E\000p5E\000p5E\000\2207E\000 7E\000p5E\000p5E\000\0008E\000 7E\000p5E\000p5E\000\0008E\000\2006E\000p5E\000p5E\000\0008E\000\2006E\000\2207E\000p5E\000\0008E\000\2006E\000\2207E\000\3004E\000\0008E\000\2006E\000\2207E\000\3004E\000`2E\000\2006E\000\2207E\000\3004E\000`2E\000 5E\000\2207E\000\3004E\000`2E\000 5E\000\0204E\000\3004E\000`2E\000 5E\000\0204E\000\3605E\000`2E\000 5E\000\0204E\000\3605E\000 6E\000 5E\000\0204E\000\3605E\000 6E\000@4E\000\0204E\000\3605E\000 6E\000@4E\000`1E\000\3605E\000 6E\000@4E\000`1E\000p2E\000 6E\000@4E\000`1E\000p2E\00001E\000@4E\000`1E\000p2E\00001E\000p1E\000`1E\000p2E\00001E\000p1E\000\3401E\000p2E\00001E\000p1E\000\3401E\000@2E\00001E\000p1E\000\3401E\000@2E\000p0E\000p1E\000\3401E\000@2E\000p0E\000 1E\000\3401E\000@2E\000p0E\000 1E\000`1E\000@2E\000p0E\000 1E\000`1E\000\3000E\000p0E\000 1E\000`1E\000\3000E\000\300.E\000 1E\000`1E\000\3000E\000\300.E\000\200.E\000`1E\000\3000E\000\300.E\000\200.E\000\340.E\000\3000E\000\300.E\000\200.E\000\340.E\000P/E\000\300.E\000\200.E\000\340.E\000P/E\000 0E\000\200.E\000\340.E\000P/E\000 0E\0000-E\000\340.E\000P/E\000 0E\0000-E\000p-E\000P/E\000 0E\0000-E\000p-E\000\320,E\000 0E\0000-E\000p-E\000\320,E\000\320,E\0000-E\000p-E\000\320,E\000\320,E\000\000,E\000p-E\000\320,E\000\320,E\000\000,E\000\220-E\000\320,E\000\320,E\000\000,E\000\220-E\000\240.E\000\320,E\000\000,E\000\220-E\000\240.E\000`2E\000\000,E\000\220-E\000\240.E\000`2E\000\0002E\000\220-E\000\240.E\000`2E\000\0002E\000\3401E\000\240.E\000`2E\000\0002E\000\3401E\000\2001E\000`p4E\000\0201E\000 3E\00005E\000p4E\000@4E\000 3E\00005E\000p4E\000@4E\000\2604E\00005E\000p4E\000@4E\000\2604E\000 5E\000pp9E\000\320<E\000\2209E\000\220:E\000p9E\000p8E\000\2209E\000\220:E\000p9E\000p8E\000\3409E\000\220:E\000p9E\000p8E\000\3409E\000\200;E\000p9E\000p8E\000\3409E\000\200;E\000\020=E\000p`>E\000 >E\000@>E\000\220>E\000`>E\000PAE\000@>E\000\220>E\000`>E\000PAE\000 BE\000\220>E\000`>E\000PAE\000 BE\000`BE\000`>E\000PAE\000 BE\000`BE\000\340IE\000PAE\000 BE\000`BE\000\340IE\000\360JE\000 BE\000`BE\000\340IE\000\360JE\000\360JE\000`BE\000\340IE\000\360JE\000\360JE\0000ME\000\340IE\000\360JE\000\360JE\0000ME\000`NE\000\360JE\000\360JE\0000ME\000`NE\000\260IE\000\360JE\0000ME\000`NE\000\260IE\000\240KE\0000ME\000`NE\000\260IE\000\240KE\000\240KE\000`NE\000\260IE\000\240KE\000\240KE\000\000GE\000\260IE\000\240KE\000\240KE\000\000GE\000\200PE\000\240KE\000\240KE\000\000GE\000\200PE\000\360SE\000\240KE\000\000GE\000\200PE\000\360SE\000PUE\000\000GE\000\200PE\000\360SE\000PUE\000\020UE\000\200PE\000\360SE\000PUE\000\020UE\000\240UE\000\360SE\000PUE\000\020UE\000\240UE\000\220TE\000PUE\000\020UE\000\240UE\000\220TE\000pUE\000\020UE\000\240UE\000\220TE\000pUE\0000UE\000\240UE\000\220TE\000pUE\0000UE\000\240UE\000\220TE\000pUE\0000UE\000\240UE\000 TE\000pUE\0000UE\000\240UE\000 TE\000pWE\0000UE\000\240UE\000 TE\000pWE\000\220SE\000\240UE\000 TE\000pWE\000\220SE\000\240OE\000 TE\000pWE\000\220SE\000\240OE\000\240SE\000pWE\000\220SE\000\240OE\000\240SE\000\320PE\000\220SE\000\240OE\000\240SE\000\320PE\000\300TE\000\240OE\000\240SE\000\320PE\000\300TE\000\200RE\000\240SE\000\320PE\000\300TE\000\200RE\000\300PE\000\320PE\000\300TE\000\200RE\000\300PE\000\200SE\000\300TE\000\200RE\000\300PE\000\200SE\000\220YE\000\200RE\000\300PE\000\200SE\000\220YE\000\000ZE\000\300PE\000\200SE\000\220YE\000\000ZE\000\360ZE\000\200SE\000\220YE\000\000ZE\000\360ZE\000p[E\000\220YE\000\000ZE\000\360ZE\000p[E\000\260ZE\000\000ZE\000\360ZE\000p[E\000\260ZE\000\000SE\000\360ZE\000p[E\000\260ZE\000\000SE\000 SE\000p[E\000\260ZE\000\000SE\000 SE\0000QE\000\260ZE\000\000SE\000 SE\0000QE\000\340IE\000\000SE\000 SE\0000QE\000\340IE\000\240JE\000 SE\0000QE\000\340IE\000\240JE\000`KE\0000QE\000\340IE\000\240JE\000`KE\000\200HE\000\340IE\000\240JE\000`KE\000\200HE\000\000IE\000\240JE\000`KE\000\200HE\000\000IE\000\300KE\000`KE\000\200HE\000\000IE\000\300KE\000\020KE\000\200HE\000\000IE\000\300KE\000\020KE\000`HE\000\000IE\000\300KE\000\020KE\000`HE\000pHE\000\300KE\000\020KE\000`HE\000pHE\000\260GE\000\020KE\000`HE\000pHE\000\260GE\000 IE\000`HE\000pHE\000\260GE\000 IE\000\200KE\000pHE\000\260GE\000 IE\000\200KE\000\020LE\000\260GE\000 IE\000\200KE\000\020LE\000\020ME\000 IE\000\200KE\000\020LE\000\020ME\0000ME\000\200KE\000\020LE\000\020ME\0000ME\000`JE\000\020LE\000\020ME\0000ME\000`JE\000\320KE\000\020ME\0000ME\000`JE\000\320KE\000\240KE\0000ME\000`JE\000\320KE\000\240KE\000\300ME\000`JE\000\320KE\000\240KE\000\300ME\000@QE\000\320KE\000\240KE\000\300ME\000@QE\000\200NE\000\240KE\000\300ME\000@QE\000\200NE\000\340OE\000\300ME\000@QE\000\200NE\000\340OE\000\240PE\000@QE\000\200NE\000\340OE\000\240PE\000\000QE\000\200NE\000\340OE\000\240PE\000\000QE\000 RE\000\340OE\000\240PE\000\000QE\000 RE\000@QE\000\240PE\000\000QE\000 RE\000@QE\000\260RE\000\000QE\000 RE\000@QE\000\260RE\000pTE\000 RE\000@QE\000\260RE\000pTE\000\240SE\000@QE\000\260RE\000pTE\000\240SE\000\220UE\000\260RE\000pTE\000\240SE\000\220UE\000\220SE\000p`\\E\000\220ZE\000\260\\E\000 ]E\000`\\E\0000ZE\000\260\\E\000 ]E\000`\\E\0000ZE\000\360YE\000 ]E\000`\\E\0000ZE\000\360YE\0000\\E\000`\\E\0000ZE\000\360YE\0000\\E\000\000YE\0000ZE\000\360YE\0000\\E\000\000YE\000\260UE\000\360YE\0000\\E\000\000YE\000\260UE\000\360WE\0000\\E\000\000YE\000\260UE\000\360WE\000\300WE\000\000YE\000\260UE\000\360WE\000\300WE\000\300YE\000\260UE\000\360WE\000\300WE\000\300YE\000\300[E\000\360WE\000\300WE\000\300YE\000\300[E\000\200^E\000\300WE\000\300YE\000\300[E\000\200^E\000\220]E\000\300YE\000\300[E\000\200^E\000\220]E\000p]E\000\300[E\000\200^E\000\220]E\000p]E\000P]E\000\200^E\000\220]E\000p]E\000P]E\000\340YE\000\220]E\000p]E\000P]E\000\340YE\000PXE\000p]E\000P]E\000\340YE\000PXE\000\340VE\000P]E\000\340YE\000PXE\000\340VE\000 XE\000\340YE\000PXE\000\340VE\000 XE\000`WE\000PXE\000\340VE\000 XE\000`WE\000\300YE\000\340VE\000 XE\000`WE\000\300YE\000\200RE\000 XE\000`WE\000\300YE\000\200RE\000\340NE\000``SE\000\220NE\0000PE\000 PE\000`SE\000\340QE\0000PE\000 PE\000`SE\000\340QE\000pTE\000 PE\000`SE\000\340QE\000pTE\000\000TE\000`SE\000\340QE\000pTE\000\000TE\000\300TE\000\340QE\000pTE\000\000TE\000\300TE\000\340TE\000pTE\000\000TE\000\300TE\000\340TE\000 UE\000\000TE\000\300TE\000\340TE\000 UE\0000VE\000\300TE\000\340TE\000 UE\0000VE\0000VE\000\340TE\000 UE\0000VE\0000VE\000\360UE\000 UE\0000VE\0000VE\000\360UE\000`UE\0000VE\0000VE\000\360UE\000`UE\000\360VE\0000VE\000\360UE\000`UE\000\360VE\000\240SE\000\360UE\000`UE\000\360VE\000\240SE\000\000SE\000``LE\000 ME\000\260OE\000\340NE\000`LE\000\300LE\000\260OE\000\340NE\000`LE\000\300LE\000pNE\000\340NE\000`LE\000\300LE\000pNE\000\000QE\000`LE\000\300LE\000pNE\000\000QE\000`PE\000\300LE\000pNE\000\000QE\000`PE\000\000QE\000pNE\000\000QE\000`PE\000\000QE\000pPE\000\000QE\000`PE\000\000QE\000pPE\000 RE\000`PE\000\000QE\000pPE\000 RE\000\360QE\000\000QE\000pPE\000 RE\000\360QE\000\020RE\000pPE\000 RE\000\360QE\000\020RE\000\020QE\000 RE\000\360QE\000\020RE\000\020QE\000@QE\000\360QE\000\020RE\000\020QE\000@QE\000@SE\000\020RE\000\020QE\000@QE\000@SE\000pTE\000\020QE\000@QE\000@SE\000pTE\000`RE\000@QE\000@SE\000pTE\000`RE\0000RE\000@SE\000pTE\000`RE\0000RE\000`RE\000pTE\000`RE\0000RE\000`RE\000\340QE\000`RE\0000RE\000`RE\000\340QE\000\340RE\0000RE\000`RE\000\340QE\000\340RE\000\360RE\000`pNE\000\300OE\000\200NE\000 OE\000pNE\000\300ME\000\200NE\000 OE\000pNE\000\300ME\000\240KE\000 OE\000pNE\000\300ME\000\240KE\000@ME\000pNE\000\300ME\000\240KE\000@ME\000@NE\000\300ME\000\240KE\000@ME\000@NE\000pME\000\240KE\000@ME\000@NE\000pME\000\360QE\000@ME\000@NE\000pME\000\360QE\000@SE\000@NE\000pME\000\360QE\000@SE\000\220SE\000p`OE\000\240TE\000\320RE\000\220SE\000`OE\000\320LE\000\320RE\000\220SE\000`OE\000\320LE\000@ME\000\220SE\000`OE\000\320LE\000@ME\000`LE\000`OE\000\320LE\000@ME\000`LE\000PIE\000\320LE\000@ME\000`LE\000PIE\000 JE\000@ME\000`LE\000PIE\000 JE\000\300IE\000`LE\000PIE\000 JE\000\300IE\000\240EE\000PIE\000 JE\000\300IE\000\240EE\000p@E\000 JE\000\300IE\000\240EE\000p@E\000@<E\000\300IE\000\240EE\000p@E\000@<E\000\240@E\000\240EE\000p@E\000@<E\000\240@E\000\020>E\000p@E\000@<E\000\240@E\000\020>E\000\260:E\000@<E\000\240@E\000\020>E\000\260:E\000`=E\000\240@E\000\020>E\000\260:E\000`=E\000\2408E\000\020>E\000\260:E\000`=E\000\2408E\000\0207E\000\260:E\000`=E\000\2408E\000\0207E\000 <E\000``9E\000\2409E\000\3209E\000\000;E\000`9E\000@;E\000\3209E\000\000;E\000`9E\000@;E\000\2009E\000\000;E\000`9E\000@;E\000\2009E\000\2208E\000`9E\000@;E\000\2009E\000\2208E\000P8E\000@;E\000\2009E\000\2208E\000P8E\000\3004E\000\2009E\000\2208E\000P8E\000\3004E\000\2404E\000\2208E\000P8E\000\3004E\000\2404E\00006E\000P8E\000\3004E\000\2404E\00006E\000\3005E\000\3004E\000\2404E\00006E\000\3005E\000p4E\000\2404E\00006E\000\3005E\000p4E\000\2204E\00006E\000\3005E\000p4E\000\2204E\000\3602E\000\3005E\000p4E\000\2204E\000\3602E\000 2E\000p4E\000\2204E\000\3602E\000 2E\000\000/E\000\2204E\000\3602E\000 2E\000\000/E\000\260.E\000\3602E\000 2E\000\000/E\000\260.E\000`,E\000 2E\000\000/E\000\260.E\000`,E\000P,E\000\000/E\000\260.E\000`,E\000P,E\000\320-E\000\260.E\000`,E\000P,E\000\320-E\000\240.E\000`p8E\000@4E\000@8E\000\0008E\000p8E\000\2409E\000@8E\000\0008E\000p8E\000\2409E\00009E\000\0008E\000p8E\000\2409E\00009E\00008E\000p8E\000\2409E\00009E\00008E\000\3407E\000\2409E\00009E\00008E\000\3407E\000p:E\00009E\00008E\000\3407E\000p:E\000\000:E\00008E\000\3407E\000p:E\000\000:E\00008E\000\3407E\000p:E\000\000:E\00008E\000\0206E\000pp<E\000\3609E\000\2609E\000\200=E\000p<E\000\340=E\000\2609E\000\200=E\000p<E\000\340=E\000\220<E\000\200=E\000p<E\000\340=E\000\220<E\000\200:E\000p<E\000\340=E\000\220<E\000\200:E\000\240<E\000\340=E\000\220<E\000\200:E\000\240<E\000P=E\000\220<E\000\200:E\000\240<E\000P=E\000\020=E\000\200:E\000\240<E\000P=E\000\020=E\000\020=E\000\240<E\000P=E\000\020=E\000\020=E\000\260?E\000P=E\000\020=E\000\020=E\000\260?E\000\000@E\000\020=E\000\020=E\000\260?E\000\000@E\000\240@E\000\020=E\000\260?E\000\000@E\000\240@E\000\300?E\000\260?E\000\000@E\000\240@E\000\300?E\000P@E\000\000@E\000\240@E\000\300?E\000P@E\000`@E\000\240@E\000\300?E\000P@E\000`@E\000 BE\000\300?E\000P@E\000`@E\000 BE\000\360CE\000P@E\000`@E\000 BE\000\360CE\000 DE\000`@E\000 BE\000\360CE\000 DE\000\320BE\000 BE\000\360CE\000 DE\000\320BE\000`EE\000\360CE\000 DE\000\320BE\000`EE\000\000GE\000 DE\000\320BE\000`EE\000\000GE\000\320FE\000\320BE\000`EE\000\000GE\000\320FE\000`EE\000`EE\000\000GE\000\320FE\000`EE\000@DE\000\000GE\000\320FE\000`EE\000@DE\000\220GE\000\320FE\000`EE\000@DE\000\220GE\000`FE\000`EE\000@DE\000\220GE\000`FE\000 GE\000@DE\000\220GE\000`FE\000 GE\000@HE\000\220GE\000`FE\000 GE\000@HE\000\220HE\000``QE\000\200TE\000\000TE\000\220TE\000`QE\000\300QE\000\000TE\000\220TE\000`QE\000\300QE\000`SE\000\220TE\000`QE\000\300QE\000`SE\0000QE\000`QE\000\300QE\000`SE\0000QE\000\200SE\000\300QE\000`SE\0000QE\000\200SE\000pQE\000`SE\0000QE\000\200SE\000pQE\000\300QE\0000QE\000\200SE\000pQE\000\300QE\000PNE\000\200SE\000pQE\000\300QE\000PNE\000\320PE\000pp@E\000\220CE\000\000EE\000\020DE\000p@E\000\320BE\000\000EE\000\020DE\000p@E\000\320BE\0000BE\000\020DE\000p@E\000\320BE\0000BE\000\020DE\000p@E\000\320BE\0000BE\000\020DE\000`FE\000\320BE\0000BE\000\020DE\000`FE\000@EE\0000BE\000\020DE\000`FE\000@EE\000\220DE\000\020DE\000`FE\000@EE\000\220DE\000@BE\000`FE\000@EE\000\220DE\000@BE\000\240@E\000@EE\000\220DE\000@BE\000\240@E\000PDE\000\220DE\000@BE\000\240@E\000PDE\000\260FE\000@BE\000\240@E\000PDE\000\260FE\000\220HE\000\240@E\000PDE\000\260FE\000\220HE\000pIE\000PDE\000\260FE\000\220HE\000pIE\000`NE\000\260FE\000\220HE\000pIE\000`NE\000\360ME\000\220HE\000pIE\000`NE\000\360ME\0000LE\000pIE\000`NE\000\360ME\0000LE\000\200IE\000`NE\000\360ME\0000LE\000\200IE\000\000LE\000\360ME\0000LE\000\200IE\000\000LE\0000LE\0000LE\000\200IE\000\000LE\0000LE\000\020RE\000\200IE\000\000LE\0000LE\000\020RE\000\200UE\000\000LE\0000LE\000\020RE\000\200UE\000\220UE\0000LE\000\020RE\000\200UE\000\220UE\0000ZE\000\020RE\000\200UE\000\220UE\0000ZE\000\300ZE\000\200UE\000\220UE\0000ZE\000\300ZE\000\320YE\000\220UE\0000ZE\000\300ZE\000\320YE\000\340WE\0000ZE\000\300ZE\000\320YE\000\340WE\000\260YE\000\300ZE\000\320YE\000\340WE\000\260YE\000\340XE\000\320YE\000\340WE\000\260YE\000\340XE\0000ZE\000\340WE\000\260YE\000\340XE\0000ZE\000\000^E\000\260YE\000\340XE\0000ZE\000\000^E\000 cE\000\340XE\0000ZE\000\000^E\000 cE\000PbE\0000ZE\000\000^E\000 cE\000PbE\000\200jE\000\000^E\000 cE\000PbE\000\200jE\0000jE\000 cE\000PbE\000\200jE\0000jE\000\220hE\000PbE\000\200jE\0000jE\000\220hE\000@eE\000\200jE\0000jE\000\220hE\000@eE\000\260kE\0000jE\000\220hE\000@eE\000\260kE\000\220rE\000\220hE\000@eE\000\260kE\000\220rE\000\340oE\000@eE\000\260kE\000\220rE\000\340oE\0000sE\000\260kE\000\220rE\000\340oE\0000sE\000\220vE\000\220rE\000\340oE\0000sE\000\220vE\000\320yE\000\340oE\0000sE\000\220vE\000\320yE\000\220wE\0000sE\000\220vE\000\320yE\000\220wE\000\360lE\000\220vE\000\320yE\000\220wE\000\360lE\000\000jE\000\320yE\000\220wE\000\360lE\000\000jE\000\260lE\000\220wE\000\360lE\000\000jE\000\260lE\000PnE\000\360lE\000\000jE\000\260lE\000PnE\000\220uE\000\000jE\000\260lE\000PnE\000\220uE\0000zE\000\260lE\000PnE\000\220uE\0000zE\000`xE\000PnE\000\220uE\0000zE\000`xE\000\000wE\000\220uE\0000zE\000`xE\000\000wE\000`uE\0000zE\000`xE\000\000wE\000`uE\000\320qE\000`xE\000\000wE\000`uE\000\320qE\000\200tE\000\000wE\000`uE\000\320qE\000\200tE\000\260oE\000`uE\000\320qE\000\200tE\000\260oE\000PqE\000\320qE\000\200tE\000\260oE\000PqE\000\020uE\000\200tE\000\260oE\000PqE\000\020uE\000\300qE\000\260oE\000PqE\000\020uE\000\300qE\000\340qE\000PqE\000\020uE\000\300qE\000\340qE\000puE\000\020uE\000\300qE\000\340qE\000puE\000\000sE\000\300qE\000\340qE\000puE\000\000sE\000\300sE\000\340qE\000puE\000\000sE\000\300sE\000@wE\000puE\000\000sE\000\300sE\000@wE\000\200\177E\000\000sE\000\300sE\000@wE\000\200\177E\0000\201E\000\300sE\000@wE\000\200\177E\0000\201E\000\020\201E\000@wE\000\200\177E\0000\201E\000\020\201E\000\330\202E\000\200\177E\0000\201E\000\020\201E\000\330\202E\000h\204E\0000\201E\000\020\201E\000\330\202E\000h\204E\000P\203E\000\020\201E\000\330\202E\000h\204E\000P\203E\000 \205E\000\330\202E\000h\204E\000P\203E\000 \205E\0000\205E\000h\204E\000P\203E\000 \205E\0000\205E\000X\204E\000P\203E\000 \205E\0000\205E\000X\204E\000\250\207E\000 \205E\0000\205E\000X\204E\000\250\207E\000p\210E\0000\205E\000X\204E\000\250\207E\000p\210E\000\300\206E\000X\204E\000\250\207E\000p\210E\000\300\206E\000h\204E\000\250\207E\000p\210E\000\300\206E\000h\204E\000\240\203E\000p\210E\000\300\206E\000h\204E\000\240\203E\000p\204E\000\300\206E\000h\204E\000\240\203E\000p\204E\000P\202E\000h\204E\000\240\203E\000p\204E\000P\202E\000H\203E\000\240\203E\000p\204E\000P\202E\000H\203E\000\330\203E\000p\204E\000P\202E\000H\203E\000\330\203E\000\310\204E\000P\202E\000H\203E\000\330\203E\000\310\204E\0000\177E\000H\203E\000\330\203E\000\310\204E\0000\177E\000 zE\000\330\203E\000\310\204E\0000\177E\000 zE\000\200|E\000\310\204E\0000\177E\000 zE\000\200|E\000P|E\0000\177E\000 zE\000\200|E\000P|E\000\320zE\000 zE\000\200|E\000P|E\000\320zE\000\220wE\000\200|E\000P|E\000\320zE\000\220wE\000\000zE\000P|E\000\320zE\000\220wE\000\000zE\000\020xE\000\320zE\000\220wE\000\000zE\000\020xE\000 xE\000\220wE\000\000zE\000\020xE\000 xE\000\000yE\000\000zE\000\020xE\000 xE\000\000yE\000`rE\000\020xE\000 xE\000\000yE\000`rE\000\220sE\000 xE\000\000yE\000`rE\000\220sE\000\260oE\000\000yE\000`rE\000\220sE\000\260oE\000\360oE\000`rE\000\220sE\000\260oE\000\360oE\000`lE\000\220sE\000\260oE\000\360oE\000`lE\000@fE\000\260oE\000\360oE\000`lE\000@fE\000\020hE\000\360oE\000`lE\000@fE\000\020hE\000\000hE\000`lE\000@fE\000\020hE\000\000hE\000\220kE\000@fE\000\020hE\000\000hE\000\220kE\000\220lE\000\020hE\000\000hE\000\220kE\000\220lE\000@oE\000\000hE\000\220kE\000\220lE\000@oE\000`jE\000\220kE\000\220lE\000@oE\000`jE\000\020nE\000\220lE\000@oE\000`jE\000\020nE\000\340lE\000@oE\000`jE\000\020nE\000\340lE\000@mE\000`jE\000\020nE\000\340lE\000@mE\000\300iE\000\020nE\000\340lE\000@mE\000\300iE\000\020jE\000\340lE\000@mE\000\300iE\000\020jE\000\200kE\000@mE\000\300iE\000\020jE\000\200kE\000PpE\000\300iE\000\020jE\000\200kE\000PpE\000\000nE\000\020jE\000\200kE\000PpE\000\000nE\000pkE\000\200kE\000PpE\000\000nE\000pkE\000\240VE\000PpE\000\000nE\000pkE\000\240VE\000`kE\000\000nE\000pkE\000\240VE\000`kE\000\020kE\000pkE\000\240VE\000`kE\000\020kE\000PiE\000\240VE\000`kE\000\020kE\000PiE\000\300`E\000`kE\000\020kE\000PiE\000\300`E\000\260FE\000\020kE\000PiE\000\300`E\000\260FE\000\340HE\000PiE\000\300`E\000\260FE\000\340HE\000PDE\000\300`E\000\260FE\000\340HE\000PDE\000\320CE\000\260FE\000\340HE\000PDE\000\320CE\000`FE\000\340HE\000PDE\000\320CE\000`FE\000`DE\000PDE\000\320CE\000`FE\000`DE\000pGE\000\320CE\000`FE\000`DE\000pGE\000@GE\000`FE\000`DE\000pGE\000@GE\000 JE\000`DE\000pGE\000@GE\000 JE\000\300HE\000pGE\000@GE\000 JE\000\300HE\000\200IE\000@GE\000 JE\000\300HE\000\200IE\000\220KE\000 JE\000\300HE\000\200IE\000\220KE\000PKE\000\300HE\000\200IE\000\220KE\000PKE\000\360IE\000\200IE\000\220KE\000PKE\000\360IE\000PME\000\220KE\000PKE\000\360IE\000PME\000\300LE\000PKE\000\360IE\000PME\000\300LE\000pNE\000\360IE\000PME\000\300LE\000pNE\000\200QE\000PME\000\300LE\000pNE\000\200QE\000`TE\000\300LE\000pNE\000\200QE\000`TE\000\360RE\000pNE\000\200QE\000`TE\000\360RE\000PUE\000\200QE\000`TE\000\360RE\000PUE\000\360SE\000`TE\000\360RE\000PUE\000\360SE\000\020TE\000\360RE\000PUE\000\360SE\000\020TE\000\000XE\000PUE\000\360SE\000\020TE\000\000XE\000\220ZE\000\360SE\000\020TE\000\000XE\000\220ZE\000\260XE\000\020TE\000\000XE\000\220ZE\000\260XE\000\260UE\000\000XE\000\220ZE\000\260XE\000\260UE\000\340QE\000\220ZE\000\260XE\000\260UE\000\340QE\0000QE\000\260XE\000\260UE\000\340QE\0000QE\000PQE\000\260UE\000\340QE\0000QE\000PQE\000`OE\000\340QE\0000QE\000PQE\000`OE\000PPE\0000QE\000PQE\000`OE\000PPE\000\200RE\000PQE\000`OE\000PPE\000\200RE\000\200PE\000`pSE\000 VE\000\200VE\000\340QE\000pSE\000PVE\000\200VE\000\340QE\000pSE\000PVE\000\260UE\000\340QE\000pSE\000PVE\000\260UE\000\300YE\000pSE\000PVE\000\260UE\000\300YE\000@[E\000PVE\000\260UE\000\300YE\000@[E\000\020\\E\000\260UE\000\300YE\000@[E\000\020\\E\000\360ZE\000\300YE\000@[E\000\020\\E\000\360ZE\000\200[E\000@[E\000\020\\E\000\360ZE\000\200[E\000\300\\E\000\020\\E\000\360ZE\000\200[E\000\300\\E\000\360[E\000\360ZE\000\200[E\000\300\\E\000\360[E\000\340RE\000\200[E\000\300\\E\000\360[E\000\340RE\000`ME\000\300\\E\000\360[E\000\340RE\000`ME\000\260NE\000\360[E\000\340RE\000`ME\000\260NE\000\000QE\000\340RE\000`ME\000\260NE\000\000QE\000pQE\000`ME\000\260NE\000\000QE\000pQE\000\300WE\000\260NE\000\000QE\000pQE\000\300WE\000\000RE\000\000QE\000pQE\000\300WE\000\000RE\000POE\000pQE\000\300WE\000\000RE\000POE\000\220PE\000\300WE\000\000RE\000POE\000\220PE\000PQE\000\000RE\000POE\000\220PE\000PQE\000\300SE\000POE\000\220PE\000PQE\000\300SE\000PRE\000\220PE\000PQE\000\300SE\000PRE\000PUE\000PQE\000\300SE\000PRE\000PUE\000`TE\000\300SE\000PRE\000PUE\000`TE\000\240TE\000PRE\000PUE\000`TE\000\240TE\000\340UE\000PUE\000`TE\000\240TE\000\340UE\000\260SE\000`pDE\000\360EE\000\300GE\000 GE\000pDE\0000EE\000\300GE\000 GE\000pDE\0000EE\0000BE\000 GE\000pDE\0000EE\0000BE\000\320DE\000pDE\0000EE\0000BE\000\320DE\000@FE\0000EE\0000BE\000\320DE\000@FE\000\300HE\0000BE\000\320DE\000@FE\000\300HE\000\220GE\000\320DE\000@FE\000\300HE\000\220GE\000`HE\000@FE\000\300HE\000\220GE\000`HE\000`GE\000\300HE\000\220GE\000`HE\000`GE\000\260JE\000\220GE\000`HE\000`GE\000\260JE\000\340JE\000`HE\000`GE\000\260JE\000\340JE\000\360KE\000`GE\000\260JE\000\340JE\000\360KE\000\020IE\000\260JE\000\340JE\000\360KE\000\020IE\000\020LE\000\340JE\000\360KE\000\020IE\000\020LE\000\020KE\000\360KE\000\020IE\000\020LE\000\020KE\000\020KE\000\020IE\000\020LE\000\020KE\000\020KE\000 ME\000\020LE\000\020KE\000\020KE\000 ME\000pNE\000\020KE\000\020KE\000 ME\000pNE\000pOE\000\020KE\000 ME\000pNE\000pOE\000\220OE\000 ME\000pNE\000pOE\000\220OE\000\200PE\000pNE\000pOE\000\220OE\000\200PE\000PPE\000pOE\000\220OE\000\200PE\000PPE\000\200OE\000\220OE\000\200PE\000PPE\000\200OE\000\000PE\000\200PE\000PPE\000\200OE\000\000PE\000\260SE\000PPE\000\200OE\000\000PE\000\260SE\000\200GE\000\200OE\000\000PE\000\260SE\000\200GE\000\240VE\000\000PE\000\260SE\000\200GE\000\240VE\000\320ME\000\260SE\000\200GE\000\240VE\000\320ME\000p\\E\000\200GE\000\240VE\000\320ME\000p\\E\000 LE\000\240VE\000\320ME\000p\\E\000 LE\000\260IE\000\320ME\000p\\E\000 LE\000\260IE\000\020JE\000p\\E\000 LE\000\260IE\000\020JE\000\000IE\000 LE\000\260IE\000\020JE\000\000IE\000`JE\000\260IE\000\020JE\000\000IE\000`JE\000\340HE\000\020JE\000\000IE\000`JE\000\340HE\000@IE\000\000IE\000`JE\000\340HE\000@IE\000\240HE\000``KE\000 JE\000\220JE\000@KE\000`KE\000\340IE\000\220JE\000@KE\000`KE\000\340IE\0000LE\000@KE\000`KE\000\340IE\0000LE\000pLE\000`KE\000\340IE\0000LE\000pLE\000\360ME\000\340IE\0000LE\000pLE\000\360ME\000\260KE\0000LE\000pLE\000\360ME\000\260KE\000\320JE\000pLE\000\360ME\000\260KE\000\320JE\000\300OE\000\360ME\000\260KE\000\320JE\000\300OE\000\220ME\000\260KE\000\320JE\000\300OE\000\220ME\000\340KE\000\320JE\000\300OE\000\220ME\000\340KE\000@EE\000\300OE\000\220ME\000\340KE\000@EE\0000EE\000\220ME\000\340KE\000@EE\0000EE\000`EE\000\340KE\000@EE\0000EE\000`EE\000\300DE\000@EE\0000EE\000`EE\000\300DE\000\020FE\0000EE\000`EE\000\300DE\000\020FE\000\200DE\000`EE\000\300DE\000\020FE\000\200DE\000\000DE\000\300DE\000\020FE\000\200DE\000\000DE\000\300DE\000\020FE\000\200DE\000\000DE\000\300DE\000PCE\000\200DE\000\000DE\000\300DE\000PCE\000 EE\000\000DE\000\300DE\000PCE\000 EE\000\300FE\000\300DE\000PCE\000 EE\000\300FE\000`HE\000PCE\000 EE\000\300FE\000`HE\000 ME\000 EE\000\300FE\000`HE\000 ME\000 LE\000\300FE\000`HE\000 ME\000 LE\000pOE\000`HE\000 ME\000 LE\000pOE\000\300QE\000 ME\000 LE\000pOE\000\300QE\000 TE\000 LE\000pOE\000\300QE\000 TE\000\020UE\000pOE\000\300QE\000 TE\000\020UE\000\000UE\000\300QE\000 TE\000\020UE\000\000UE\000\360VE\000 TE\000\020UE\000\000UE\000\360VE\000\360UE\000\020UE\000\000UE\000\360VE\000\360UE\0000^E\000\000UE\000\360VE\000\360UE\0000^E\000\300eE\000\360VE\000\360UE\0000^E\000\300eE\000\020dE\000\360UE\0000^E\000\300eE\000\020dE\000`bE\0000^E\000\300eE\000\020dE\000`bE\000@^E\000\300eE\000\020dE\000`bE\000@^E\000\240dE\000\020dE\000`bE\000@^E\000\240dE\000\020dE\000`bE\000@^E\000\240dE\000\020dE\000\220aE\000@^E\000\240dE\000\020dE\000\220aE\000\340_E\000\240dE\000\020dE\000\220aE\000\340_E\000@dE\000\020dE\000\220aE\000\340_E\000@dE\000@cE\000\220aE\000\340_E\000@dE\000@cE\000\320_E\000\340_E\000@dE\000@cE\000\320_E\000\020cE\000@dE\000@cE\000\320_E\000\020cE\000\300bE\000@cE\000\320_E\000\020cE\000\300bE\000\260hE\000\320_E\000\020cE\000\300bE\000\260hE\000\020cE\000\020cE\000\300bE\000\260hE\000\020cE\000\020cE\000\300bE\000\260hE\000\020cE\000\020cE\000\320bE\000\260hE\000\020cE\000\020cE\000\320bE\000\020`E\000\020cE\000\020cE\000\320bE\000\020`E\000\340bE\000\020cE\000\320bE\000\020`E\000\340bE\000\000dE\000\320bE\000\020`E\000\340bE\000\000dE\000\260dE\000\020`E\000\340bE\000\000dE\000\260dE\000\300fE\000\340bE\000\000dE\000\260dE\000\300fE\000\360gE\000\000dE\000\260dE\000\300fE\000\360gE\000\360gE\000\260dE\000\300fE\000\360gE\000\360gE\000\320jE\000\300fE\000\360gE\000\360gE\000\320jE\000 jE\000\360gE\000\360gE\000\320jE\000 jE\000\340gE\000\360gE\000\320jE\000 jE\000\340gE\000pdE\000\320jE\000 jE\000\340gE\000pdE\000\360bE\000 jE\000\340gE\000pdE\000\360bE\000 bE\000\340gE\000pdE\000\360bE\000 bE\000\200bE\000pdE\000\360bE\000 bE\000\200bE\000\300`E\000\360bE\000 bE\000\200bE\000\300`E\000\220bE\000 bE\000\200bE\000\300`E\000\220bE\000\340aE\000\200bE\000\300`E\000\220bE\000\340aE\000P`E\000\300`E\000\220bE\000\340aE\000P`E\000\260aE\000\220bE\000\340aE\000P`E\000\260aE\000`cE\000\340aE\000P`E\000\260aE\000`cE\000\200aE\000P`E\000\260aE\000`cE\000\200aE\000\300_E\000\260aE\000`cE\000\200aE\000\300_E\000P_E\000`cE\000\200aE\000\300_E\000P_E\000 ^E\000\200aE\000\300_E\000P_E\000 ^E\000`JE\000\300_E\000P_E\000 ^E\000`JE\000\300IE\000P_E\000 ^E\000`JE\000\300IE\000pIE\000 ^E\000`JE\000\300IE\000pIE\000pIE\000`JE\000\300IE\000pIE\000pIE\000\200IE\000\300IE\000pIE\000pIE\000\200IE\000`IE\000pIE\000pIE\000\200IE\000`IE\000PIE\000pIE\000\200IE\000`IE\000PIE\000\020LE\000\200IE\000`IE\000PIE\000\020LE\000\020ME\000`IE\000PIE\000\020LE\000\020ME\000\000NE\000PIE\000\020LE\000\020ME\000\000NE\000\300LE\000\020LE\000\020ME\000\000NE\000\300LE\000\000ME\000\020ME\000\000NE\000\300LE\000\000ME\000`JE\000\000NE\000\300LE\000\000ME\000`JE\000\240IE\000\300LE\000\000ME\000`JE\000\240IE\000PJE\000\000ME\000`JE\000\240IE\000PJE\000\320KE\000`pSE\000\220RE\000\200RE\0000QE\000pSE\000 SE\000\200RE\0000QE\000pSE\000 SE\000\020SE\0000QE\000pSE\000 SE\000\020SE\0000QE\000ppOE\000@ME\0000NE\000\300OE\000pOE\000\200ME\0000NE\000\300OE\000pOE\000\200ME\000\300PE\000\300OE\000pOE\000\200ME\000\300PE\000\300RE\000pOE\000\200ME\000\300PE\000\300RE\000\300RE\000\200ME\000\300PE\000\300RE\000\300RE\000\320SE\000\300PE\000\300RE\000\300RE\000\320SE\000PRE\000\300RE\000\300RE\000\320SE\000PRE\000\320NE\000\300RE\000\320SE\000PRE\000\320NE\000\240NE\000\320SE\000PRE\000\320NE\000\240NE\000\000NE\000PRE\000\320NE\000\240NE\000\000NE\000`OE\000\320NE\000\240NE\000\000NE\000`OE\000\260NE\000\240NE\000\000NE\000`OE\000\260NE\000\240NE\000\000NE\000`OE\000\260NE\000\240NE\000\300NE\000`OE\000\260NE\000\240NE\000\300NE\000\020TE\000\260NE\000\240NE\000\300NE\000\020TE\000\020UE\000\240NE\000\300NE\000\020TE\000\020UE\000\220SE\000\300NE\000\020TE\000\020UE\000\220SE\000PVE\000\020TE\000\020UE\000\220SE\000PVE\000\220UE\000\020UE\000\220SE\000PVE\000\220UE\000`WE\000\220SE\000PVE\000\220UE\000`WE\000PUE\000PVE\000\220UE\000`WE\000PUE\000\240UE\000\220UE\000`WE\000PUE\000\240UE\000\200VE\000`WE\000PUE\000\240UE\000\200VE\000\000VE\000PUE\000\240UE\000\200VE\000\000VE\000\360SE\000\240UE\000\200VE\000\000VE\000\360SE\000PNE\000\200VE\000\000VE\000\360SE\000PNE\000\320ME\000\000VE\000\360SE\000PNE\000\320ME\000@NE\000\360SE\000PNE\000\320ME\000@NE\000\260ME\000PNE\000\320ME\000@NE\000\260ME\000\320KE\000\320ME\000@NE\000\260ME\000\320KE\000\200ME\000@NE\000\260ME\000\320KE\000\200ME\000\200LE\000\260ME\000\320KE\000\200ME\000\200LE\000`ME\000\320KE\000\200ME\000\200LE\000`ME\000`ME\000\200ME\000\200LE\000`ME\000`ME\000\000NE\000\200LE\000`ME\000`ME\000\000NE\000@NE\000`ME\000`ME\000\000NE\000@NE\000\340LE\000`p\\E\000\020TE\000 TE\0000[E\000p\\E\000PZE\000 TE\0000[E\000p\\E\000PZE\000\000\\E\0000[E\000p\\E\000PZE\000\000\\E\000PZE\000p\\E\000PZE\000\000\\E\000PZE\000\360ZE\000PZE\000\000\\E\000PZE\000\360ZE\000PZE\000\000\\E\000PZE\000\360ZE\000PZE\000\200YE\000PZE\000\360ZE\000PZE\000\200YE\000@YE\000\360ZE\000PZE\000\200YE\000@YE\000PYE\000PZE\000\200YE\000@YE\000PYE\000@\\E\000\200YE\000@YE\000PYE\000@\\E\000\000_E\000@YE\000PYE\000@\\E\000\000_E\000\020`E\000PYE\000@\\E\000\000_E\000\020`E\000\020^E\000@\\E\000\000_E\000\020`E\000\020^E\000p_E\000\000_E\000\020`E\000\020^E\000p_E\000\260]E\000\020`E\000\020^E\000p_E\000\260]E\000\020^E\000\020^E\000p_E\000\260]E\000\020^E\000`_E\000p_E\000\260]E\000\020^E\000`_E\000PeE\000\260]E\000\020^E\000`_E\000PeE\000\000dE\000\020^E\000`_E\000PeE\000\000dE\000\200eE\000`_E\000PeE\000\000dE\000\200eE\000`^E\000PeE\000\000dE\000\200eE\000`^E\000\020bE\000\000dE\000\200eE\000`^E\000\020bE\000\020aE\000\200eE\000`^E\000\020bE\000\020aE\000\200`E\000`^E\000\020bE\000\020aE\000\200`E\000\300`E\000\020bE\000\020aE\000\200`E\000\300`E\000\220`E\000\020aE\000\200`E\000\300`E\000\220`E\0000cE\000\200`E\000\300`E\000\220`E\0000cE\000\320bE\000\300`E\000\220`E\0000cE\000\320bE\000\360eE\000\220`E\0000cE\000\320bE\000\360eE\000PgE\0000cE\000\320bE\000\360eE\000PgE\000\300fE\000\320bE\000\360eE\000PgE\000\300fE\000@gE\000\360eE\000PgE\000\300fE\000@gE\000`jE\000PgE\000\300fE\000@gE\000`jE\000\020jE\000\300fE\000@gE\000`jE\000\020jE\000\260oE\000@gE\000`jE\000\020jE\000\260oE\000ppE\000`jE\000\020jE\000\260oE\000ppE\000\240qE\000\020jE\000\260oE\000ppE\000\240qE\000\000mE\000\260oE\000ppE\000\240qE\000\000mE\0000mE\000ppE\000\240qE\000\000mE\0000mE\000`pE\000\240qE\000\000mE\0000mE\000`pE\000\340pE\000\000mE\0000mE\000`pE\000\340pE\000\360oE\0000mE\000`pE\000\340pE\000\360oE\000PnE\000`pE\000\340pE\000\360oE\000PnE\000 kE\000\340pE\000\360oE\000PnE\000 kE\000\200iE\000\360oE\000PnE\000 kE\000\200iE\000\300ZE\000PnE\000 kE\000\200iE\000\300ZE\000\320YE\000 kE\000\200iE\000\300ZE\000\320YE\000 ZE\000\200iE\000\300ZE\000\320YE\000 ZE\000\200\\E\000\300ZE\000\320YE\000 ZE\000\200\\E\000\020[E\000\320YE\000 ZE\000\200\\E\000\020[E\000\360kE\000 ZE\000\200\\E\000\020[E\000\360kE\000\020gE\000\200\\E\000\020[E\000\360kE\000\020gE\000\340eE\000\020[E\000\360kE\000\020gE\000\340eE\000@gE\000\360kE\000\020gE\000\340eE\000@gE\000\000gE\000\020gE\000\340eE\000@gE\000\000gE\000piE\000\340eE\000@gE\000\000gE\000piE\000@fE\000@gE\000\000gE\000piE\000@fE\000\260]E\000\000gE\000piE\000@fE\000\260]E\000\240]E\000piE\000@fE\000\260]E\000\240]E\000`iE\000@fE\000\260]E\000\240]E\000`iE\000\360[E\000\260]E\000\240]E\000`iE\000\360[E\000\000SE\000\240]E\000`iE\000\360[E\000\000SE\000\260QE\000`ipCE\000@EE\000@AE\000\340@E\000pCE\0000OE\000@AE\000\340@E\000pCE\0000OE\000\220NE\000\340@E\000pCE\0000OE\000\220NE\000\020ME\000pCE\0000OE\000\220NE\000\020ME\0000KE\0000OE\000\220NE\000\020ME\0000KE\000\000LE\000\220NE\000\020ME\0000KE\000\000LE\000 ME\000\020ME\0000KE\000\000LE\000 ME\000`ME\0000KE\000\000LE\000 ME\000`ME\000\300OE\000\000LE\000 ME\000`ME\000\300OE\0000PE\000 ME\000`ME\000\300OE\0000PE\000 OE\000`ME\000\300OE\0000PE\000 OE\000@LE\000\300OE\0000PE\000 OE\000@LE\000\360JE\0000PE\000 OE\000@LE\000\360JE\000\340HE\000 OE\000@LE\000\360JE\000\340HE\000pAE\000@LE\000\360JE\000\340HE\000pAE\0000BE\000\360JE\000\340HE\000pAE\0000BE\000`ME\000\340HE\000pAE\0000BE\000`ME\000\200KE\000pAE\0000BE\000`ME\000\200KE\000`LE\0000BE\000`ME\000\200KE\000`LE\000\220LE\000`ME\000\200KE\000`LE\000\220LE\000pLE\000\200KE\000`LE\000\220LE\000pLE\000\000KE\000`LE\000\220LE\000pLE\000\000KE\000 ?E\000\220LE\000pLE\000\000KE\000 ?E\000P>E\000pLE\000\000KE\000 ?E\000P>E\000 ?E\000\000KE\000 ?E\000P>E\000 ?E\000@>E\000 ?E\000P>E\000 ?E\000@>E\000\020?E\000P>E\000 ?E\000@>E\000\020?E\000 >E\000 ?E\000@>E\000\020?E\000 >E\000p;E\000@>E\000\020?E\000 >E\000p;E\000\2008E\000\020?E\000 >E\000p;E\000\2008E\000\3407E\000 >E\000p;E\000\2008E\000\3407E\000 6E\000p;E\000\2008E\000\3407E\000 6E\000\2005E\000\2008E\000\3407E\000 6E\000\2005E\000`7E\000\3407E\000 6E\000\2005E\000`7E\000P6E\000 6E\000\2005E\000`7E\000P6E\000P7E\000\2005E\000`7E\000P6E\000P7E\000\0208E\000`7E\000P6E\000P7E\000\0208E\000\0207E\000P6E\000P7E\000\0208E\000\0207E\000\3402E\000P7E\000\0208E\000\0207E\000\3402E\000\320-E\000\0208E\000\0207E\000\3402E\000\320-E\000\260.E\000\0207E\000\3402E\000\320-E\000\260.E\000 -E\000\3402E\000\320-E\000\260.E\000 -E\000\020-E\000\320-E\000\260.E\000 -E\000\020-E\000\300*E\000\260.E\000 -E\000\020-E\000\300*E\000p(E\000 -E\000\020-E\000\300*E\000p(E\000\220*E\000\020-E\000\300*E\000p(E\000\220*E\000\320BE\000\300*E\000p(E\000\220*E\000\320BE\000\260.E\000p(E\000\220*E\000\320BE\000\260.E\000\260+E\000\220*E\000\320BE\000\260.E\000\260+E\000\200-E\000\320BE\000\260.E\000\260+E\000\200-E\000p1E\000\260.E\000\260+E\000\200-E\000p1E\000\3200E\000\260+E\000\200-E\000p1E\000\3200E\00001E\000\200-E\000p1E\000\3200E\00001E\000\0002E\000p`2E\000P2E\000\2002E\000\2603E\000`2E\000\2003E\000\2002E\000\2603E\000`2E\000\2003E\000\0003E\000\2603E\000`2E\000\2003E\000\0003E\00004E\000`2E\000\2003E\000\0003E\00004E\000p5E\000\2003E\000\0003E\00004E\000p5E\000P1E\000\0003E\00004E\000p5E\000P1E\000\3002E\00004E\000p5E\000P1E\000\3002E\00001E\000p5E\000P1E\000\3002E\00001E\000\220/E\000P1E\000\3002E\00001E\000\220/E\000\2001E\000\3002E\00001E\000\220/E\000\2001E\000\3203E\00001E\000\220/E\000\2001E\000\3203E\000p4E\000\220/E\000\2001E\000\3203E\000p4E\000@9E\000\2001E\000\3203E\000p4E\000@9E\00008E\000\3203E\000p4E\000@9E\00008E\000\0008E\000p4E\000@9E\00008E\000\0008E\000\2208E\000@9E\00008E\000\0008E\000\2208E\000\2205E\00008E\000\0008E\000\2208E\000\2205E\000 3E\000\0008E\000\2208E\000\2205E\000 3E\000 3E\000\2208E\000\2205E\000 3E\000 3E\000\2004E\000\2205E\000 3E\000 3E\000\2004E\000\0203E\000 3E\000 3E\000\2004E\000\0203E\000\3401E\000 3E\000\2004E\000\0203E\000\3401E\000\0001E\000\2004E\000\0203E\000\3401E\000\0001E\000p1E\000\0203E\000\3401E\000\0001E\000p1E\000\3402E\000\3401E\000\0001E\000p1E\000\3402E\000 5E\000\0001E\000p1E\000\3402E\000 5E\000\2205E\000p1E\000\3402E\000 5E\000\2205E\000P3E\000\3402E\000 5E\000\2205E\000P3E\000P/E\000 5E\000\2205E\000P3E\000P/E\000\0202E\000\2205E\000P3E\000P/E\000\0202E\000\2402E\000P3E\000P/E\000\0202E\000\2402E\000\0003E\000P/E\000\0202E\000\2402E\000\0003E\000\3600E\000\0202E\000\2402E\000\0003E\000\3600E\000P1E\000\2402E\000\0003E\000\3600E\000P1E\000\020.E\000\0003E\000\3600E\000P1E\000\020.E\000\360)E\000\3600E\000P1E\000\020.E\000\360)E\000\240+E\000P1E\000\020.E\000\360)E\000\240+E\000`)E\000\020.E\000\360)E\000\240+E\000`)E\000\220\'E\000\360)E\000\240+E\000`)E\000\220\'E\000\320&E\000\240+E\000`)E\000\220\'E\000\320&E\000P(E\000`)E\000\220\'E\000\320&E\000P(E\000\240(E\000\220\'E\000\320&E\000P(E\000\240(E\000\220\'E\000\320&E\000P(E\000\240(E\000\220\'E\000 \'E\000P(E\000\240(E\000\220\'E\000 \'E\000p(E\000\240(E\000\220\'E\000 \'E\000p(E\0000(E\000\220\'E\000 \'E\000p(E\0000(E\000\340\'E\000 \'E\000p(E\0000(E\000\340\'E\000`(E\000p(E\0000(E\000\340\'E\000`(E\000\220&E\0000(E\000\340\'E\000`(E\000\220&E\0000(E\000\340\'E\000`(E\000\220&E\0000(E\000\000*E\000`(E\000\220&E\0000(E\000\000*E\000\300)E\000\220&E\0000(E\000\000*E\000\300)E\000P*E\0000(E\000\000*E\000\300)E\000P*E\000\020+E\000\000*E\000\300)E\000P*E\000\020+E\000\340*E\000\300)E\000P*E\000\020+E\000\340*E\000\200+E\000P*E\000\020+E\000\340*E\000\200+E\000`+E\000\020+E\000\340*E\000\200+E\000`+E\000\240.E\000\340*E\000\200+E\000`+E\000\240.E\000\360.E\000\200+E\000`+E\000\240.E\000\360.E\000\220/E\000`+E\000\240.E\000\360.E\000\220/E\000`1E\000\240.E\000\360.E\000\220/E\000`1E\00002E\000\360.E\000\220/E\000`1E\00002E\000\0003E\000\220/E\000`1E\00002E\000\0003E\000\3202E\000`1E\00002E\000\0003E\000\3202E\000@0E\00002E\000\0003E\000\3202E\000@0E\000\0200E\000\0003E\000\3202E\000@0E\000\0200E\000\320-E\000\3202E\000@0E\000\0200E\000\320-E\000\240,E\000@0E\000\0200E\000\320-E\000\240,E\0000.E\000\0200E\000\320-E\000\240,E\0000.E\000 .E\000\320-E\000\240,E\0000.E\000 .E\000`0E\000\240,E\0000.E\000 .E\000`0E\000p1E\0000.E\000 .E\000`0E\000p1E\000\240/E\000 .E\000`0E\000p1E\000\240/E\000\020.E\000`0E\000p1E\000\240/E\000\020.E\000\320-E\000p1E\000\240/E\000\020.E\000\320-E\000\000,E\000\240/E\000\020.E\000\320-E\000\000,E\000\200-E\000\020.E\000\320-E\000\000,E\000\200-E\000P-E\000\320-E\000\000,E\000\200-E\000P-E\000`/E\000\000,E\000\200-E\000P-E\000`/E\000 0E\000\200-E\000P-E\000`/E\000 0E\000\360.E\000P-E\000`/E\000 0E\000\360.E\000\300-E\000`/E\000 0E\000\360.E\000\300-E\000\340-E\000 0E\000\360.E\000\300-E\000\340-E\000\260,E\000\360.E\000\300-E\000\340-E\000\260,E\000\020,E\000\300-E\000\340-E\000\260,E\000\020,E\000\240.E\000\340-E\000\260,E\000\020,E\000\240.E\000\340.E\000\260,E\000\020,E\000\240.E\000\340.E\000P-E\000\020,E\000\240.E\000\340.E\000P-E\000\000-E\000\240.E\000\340.E\000P-E\000\000-E\000\260,E\000\340.E\000P-E\000\000-E\000\260,E\000@)E\000P-E\000\000-E\000\260,E\000@)E\000\240\'E\000\000-E\000\260,E\000@)E\000\240\'E\000p(E\000\260,E\000@)E\000\240\'E\000p(E\000\200(E\000@)E\000\240\'E\000p(E\000\200(E\000@)E\000\240\'E\000p(E\000\200(E\000@)E\000p(E\000p(E\000\200(E\000@)E\000p(E\0000)E\000\200(E\000@)E\000p(E\0000)E\000\360)E\000@)E\000p(E\0000)E\000\360)E\000`*E\000p(E\0000)E\000\360)E\000`*E\000P)E\0000)E\000\360)E\000`*E\000P)E\000\000*E\000\360)E\000`*E\000P)E\000\000*E\000\320*E\000`*E\000P)E\000\000*E\000\320*E\000P+E\000P)E\000\000*E\000\320*E\000P+E\000\300,E\000\000*E\000\320*E\000P+E\000\300,E\000\240+E\000\320*E\000P+E\000\300,E\000\240+E\000@-E\000P+E\000\300,E\000\240+E\000@-E\000\240*E\000\300,E\000\240+E\000@-E\000\240*E\000\240*E\000\240+E\000@-E\000\240*E\000\240*E\000\300+E\000@-E\000\240*E\000\240*E\000\300+E\000 ,E\000\240*E\000\240*E\000\300+E\000 ,E\000p*E\000\240*E\000\300+E\000 ,E\000p*E\000\320*E\000\300+E\000 ,E\000p*E\000\320*E\000\000(E\000 ,E\000p*E\000\320*E\000\000(E\000P\'E\000p*E\000\320*E\000\000(E\000P\'E\000\000\'E\000\320*E\000\000(E\000P\'E\000\000\'E\000\000\'E\000\000(E\000P\'E\000\000\'E\000\000\'E\000\360&E\000P\'E\000\000\'E\000\000\'E\000\360&E\000`&E\000\000\'E\000\000\'E\000\360&E\000`&E\000\340!E\000\000\'E\000\360&E\000`&E\000\340!E\000p!E\000\360&E\000`&E\000\340!E\000p!E\000\260!E\000`&E\000\340!E\000p!E\000\260!E\000p\036E\000\340!E\000p!E\000\260!E\000p\036E\000\000\036E\000p!E\000\260!E\000p\036E\000\000\036E\000P\036E\000\260!E\000p\036E\000\000\036E\000P\036E\000\300\037E\000p\036E\000\000\036E\000P\036E\000\300\037E\000\220\037E\000\000\036E\000P\036E\000\300\037E\000\220\037E\000p\035E\000P\036E\000\300\037E\000\220\037E\000p\035E\000\300\037E\000\300\037E\000\220\037E\000p\035E\000\300\037E\000\260 E\000\220\037E\000p\035E\000\300\037E\000\260 E\000` E\000p\035E\000\300\037E\000\260 E\000` E\000@ E\000\300\037E\000\260 E\000` E\000@ E\000p\037E\000\260 E\000` E\000@ E\000p\037E\000\020 E\000` E\000@ E\000p\037E\000\020 E\000\220\037E\000@ E\000p\037E\000\020 E\000\220\037E\000\260\037E\000p\037E\000\020 E\000\220\037E\000\260\037E\000\240\033E\000\020 E\000\220\037E\000\260\037E\000\240\033E\000`\031E\000\220\037E\000\260\037E\000\240\033E\000`\031E\000\260\032E\000\260\037E\000\240\033E\000`\031E\000\260\032E\000\240\035E\000\240\033E\000`\031E\000\260\032E\000\240\035E\000\220\034E\000`p&E\000\300(E\000P)E\000@#E\000p&E\000\340*E\000P)E\000@#E\000p&E\000\340*E\000\300*E\000@#E\000p&E\000\340*E\000\300*E\000`/E\000p&E\000\340*E\000\300*E\000`/E\000P.E\000\340*E\000\300*E\000`/E\000P.E\000\000.E\000\300*E\000`/E\000P.E\000\000.E\000\000*E\000`/E\000P.E\000\000.E\000\000*E\000\320\'E\000P.E\000\000.E\000\000*E\000\320\'E\000\260(E\000\000.E\000\000*E\000\320\'E\000\260(E\000\360*E\000\000*E\000\320\'E\000\260(E\000\360*E\0000-E\000\320\'E\000\260(E\000\360*E\0000-E\000@+E\000\260(E\000\360*E\0000-E\000@+E\000`\'E\000\360*E\0000-E\000@+E\000`\'E\000\220\'E\0000-E\000@+E\000`\'E\000\220\'E\000\220\'E\000@+E\000`\'E\000\220\'E\000\220\'E\000\360\'E\000``\'E\000\200)E\000\300\'E\000\240&E\000`\'E\000P$E\000\300\'E\000\240&E\000`\'E\000P$E\000\360&E\000\240&E\000`\'E\000P$E\000\360&E\000\300\'E\000`p\'E\000\020\'E\000P\'E\000\000(E\000p\'E\000\020*E\000P\'E\000\000(E\000p\'E\000\020*E\000\320*E\000\000(E\000p\'E\000\020*E\000\320*E\0000+E\000p\'E\000\020*E\000\320*E\0000+E\000\360)E\000\020*E\000\320*E\0000+E\000\360)E\000\220(E\000\320*E\0000+E\000\360)E\000\220(E\000\200\'E\0000+E\000\360)E\000\220(E\000\200\'E\0000\'E\000\360)E\000\220(E\000\200\'E\0000\'E\000\000\'E\000\220(E\000\200\'E\0000\'E\000\000\'E\000\320&E\000\200\'E\0000\'E\000\000\'E\000\320&E\0000\'E\0000\'E\000\000\'E\000\320&E\0000\'E\000 \'E\000\000\'E\000\320&E\0000\'E\000 \'E\000`%E\000\320&E\0000\'E\000 \'E\000`%E\000\340&E\0000\'E\000 \'E\000`%E\000\340&E\000\240&E\000 \'E\000`%E\000\340&E\000\240&E\000\240&E\000`%E\000\340&E\000\240&E\000\240&E\000\200$E\000\340&E\000\240&E\000\240&E\000\200$E\000\200&E\000\240&E\000\240&E\000\200$E\000\200&E\0000&E\000\240&E\000\200$E\000\200&E\0000&E\000P(E\000\200$E\000\200&E\0000&E\000P(E\0000(E\000\200&E\0000&E\000P(E\0000(E\000\320\'E\0000&E\000P(E\0000(E\000\320\'E\0000&E\000P(E\0000(E\000\320\'E\0000&E\000\020%E\0000(E\000\320\'E\0000&E\000\020%E\000\020#E\000\320\'E\0000&E\000\020%E\000\020#E\000P$E\0000&E\000\020%E\000\020#E\000P$E\000@!E\000\020%E\000\020#E\000P$E\000@!E\000@!E\000\020#E\000P$E\000@!E\000@!E\000`!E\000P$E\000@!E\000@!E\000`!E\000@!E\000@!E\000@!E\000`!E\000@!E\000\360 E\000@!E\000`!E\000@!E\000\360 E\000\220\037E\000`!E\000@!E\000\360 E\000\220\037E\000\220\037E\000@!E\000\360 E\000\220\037E\000\220\037E\000\020\035E\000\360 E\000\220\037E\000\220\037E\000\020\035E\000`\035E\000\220\037E\000\220\037E\000\020\035E\000`\035E\000\260\033E\000\220\037E\000\020\035E\000`\035E\000\260\033E\000p\032E\000\020\035E\000`\035E\000\260\033E\000p\032E\000`\032E\000`\035E\000\260\033E\000p\032E\000`\032E\000\020\032E\000\260\033E\000p\032E\000`\032E\000\020\032E\000p\032E\000p\032E\000`\032E\000\020\032E\000p\032E\000\240\032E\000`\032E\000\020\032E\000p\032E\000\240\032E\000\340\030E\000\020\032E\000p\032E\000\240\032E\000\340\030E\000p\027E\000p\032E\000\240\032E\000\340\030E\000p\027E\000p\026E\000\240\032E\000\340\030E\000p\027E\000p\026E\000`\027E\000\340\030E\000p\027E\000p\026E\000`\027E\000\200\025E\000p\027E\000p\026E\000`\027E\000\200\025E\000@\024E\000p\026E\000`\027E\000\200\025E\000@\024E\000\360\014E\000`\027E\000\200\025E\000@\024E\000\360\014E\000\220\020E\000\200\025E\000@\024E\000\360\014E\000\220\020E\000\340\020E\000@\024E\000\360\014E\000\220\020E\000\340\020E\000\320\023E\000\360\014E\000\220\020E\000\340\020E\000\320\023E\000\260\023E\000\220\020E\000\340\020E\000\320\023E\000\260\023E\000`\022E\000\340\020E\000\320\023E\000\260\023E\000`\022E\000\340\023E\000\320\023E\000\260\023E\000`\022E\000\340\023E\000\300\024E\000\260\023E\000`\022E\000\340\023E\000\300\024E\000\000\022E\000`\022E\000\340\023E\000\300\024E\000\000\022E\000P\022E\000\340\023E\000\300\024E\000\000\022E\000P\022E\0000\024E\000\300\024E\000\000\022E\000P\022E\0000\024E\000P\020E\000\000\022E\000P\022E\0000\024E\000P\020E\000\300\017E\000P\022E\0000\024E\000P\020E\000\300\017E\000`\017E\0000\024E\000P\020E\000\300\017E\000`\017E\000@\022E\000P\020E\000\300\017E\000`\017E\000@\022E\000\220\022E\000\300\017E\000`\017E\000@\022E\000\220\022E\000\200\022E\000`\017E\000@\022E\000\220\022E\000\200\022E\0000\023E\000@\022E\000\220\022E\000\200\022E\0000\023E\000\240\020E\000\220\022E\000\200\022E\0000\023E\000\240\020E\000\320\023E\000\200\022E\0000\023E\000\240\020E\000\320\023E\000 \027E\0000\023E\000\240\020E\000\320\023E\000 \027E\000`\026E\000\240\020E\000\320\023E\000 \027E\000`\026E\000\320\025E\000\320\023E\000 \027E\000`\026E\000\320\025E\000\340\024E\000 \027E\000`\026E\000\320\025E\000\340\024E\000\300\023E\000`\026E\000\320\025E\000\340\024E\000\300\023E\000\220\022E\000\320\025E\000\340\024E\000\300\023E\000\220\022E\000 \024E\000\340\024E\000\300\023E\000\220\022E\000 \024E\000\200\023E\000\300\023E\000\220\022E\000 \024E\000\200\023E\000\300\024E\000\220\022E\000 \024E\000\200\023E\000\300\024E\000`\021E\000 \024E\000\200\023E\000\300\024E\000`\021E\000p\022E\000\200\023E\000\300\024E\000`\021E\000p\022E\000\260\022E\000\300\024E\000`\021E\000p\022E\000\260\022E\000\200\024E\000`\021E\000p\022E\000\260\022E\000\200\024E\000@\026E\000p\022E\000\260\022E\000\200\024E\000@\026E\000\360\024E\000\260\022E\000\200\024E\000@\026E\000\360\024E\000\240\024E\000\200\024E\000@\026E\000\360\024E\000\240\024E\000\340\024E\000@\026E\000\360\024E\000\240\024E\000\340\024E\000`\026E\000\360\024E\000\240\024E\000\340\024E\000`\026E\000@\026E\000\240\024E\000\340\024E\000`\026E\000@\026E\000\240\031E\000\340\024E\000`\026E\000@\026E\000\240\031E\000\340\031E\000`p\017E\000@\020E\000P\020E\000 \020E\000p\017E\000p\020E\000P\020E\000 \020E\000p\017E\000p\020E\000\260\021E\000 \020E\000p\017E\000p\020E\000\260\021E\000\200\021E\000p\017E\000p\020E\000\260\021E\000\200\021E\0000\023E\000pp\022E\000\260\021E\000@\022E\000\300\020E\000p\022E\000`\022E\000@\022E\000\300\020E\000p\022E\000`\022E\000`\021E\000\300\020E\000p\022E\000`\022E\000`\021E\000\240\023E\000p\022E\000`\022E\000`\021E\000\240\023E\000@\026E\000`\022E\000`\021E\000\240\023E\000@\026E\000\320\030E\000`\021E\000\240\023E\000@\026E\000\320\030E\000\020\032E\000\240\023E\000@\026E\000\320\030E\000\020\032E\000\220\032E\000@\026E\000\320\030E\000\020\032E\000\220\032E\000p\035E\000\320\030E\000\020\032E\000\220\032E\000p\035E\000`\035E\000\020\032E\000\220\032E\000p\035E\000`\035E\000\240!E\000\220\032E\000p\035E\000`\035E\000\240!E\000\200\'E\000p\035E\000`\035E\000\240!E\000\200\'E\000\320!E\000`\035E\000\240!E\000\200\'E\000\320!E\000\260 E\000\240!E\000\200\'E\000\320!E\000\260 E\000p#E\000\200\'E\000\320!E\000\260 E\000p#E\0000$E\000\320!E\000\260 E\000p#E\0000$E\000P$E\000\260 E\000p#E\0000$E\000P$E\000\220#E\000p#E\0000$E\000P$E\000\220#E\000 *E\0000$E\000P$E\000\220#E\000 *E\000P\'E\000P$E\000\220#E\000 *E\000P\'E\0000\'E\000\220#E\000 *E\000P\'E\0000\'E\000`#E\000 *E\000P\'E\0000\'E\000`#E\000\240&E\000P\'E\0000\'E\000`#E\000\240&E\000@&E\0000\'E\000`#E\000\240&E\000@&E\000`-E\000`#E\000\240&E\000@&E\000`-E\000\0201E\000\240&E\000@&E\000`-E\000\0201E\000\340.E\000@&E\000`-E\000\0201E\000\340.E\000\220/E\000`-E\000\0201E\000\340.E\000\220/E\000\3000E\000\0201E\000\340.E\000\220/E\000\3000E\000P2E\000\340.E\000\220/E\000\3000E\000P2E\000\0202E\000\220/E\000\3000E\000P2E\000\0202E\000`3E\000\3000E\000P2E\000\0202E\000`3E\000@1E\000P2E\000\0202E\000`3E\000@1E\000p*E\000\0202E\000`3E\000@1E\000p*E\000`.E\000`3E\000@1E\000p*E\000`.E\000\3604E\000@1E\000p*E\000`.E\000\3604E\000p3E\000p*E\000`.E\000\3604E\000p3E\000\3409E\000`.E\000\3604E\000p3E\000\3409E\000 7E\000\3604E\000p3E\000\3409E\000 7E\000 5E\000p
      }
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2800
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/concat"
  op: "Identity"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.6324555277824402
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6324555277824402
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/weights/part_0"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/weights/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/biases/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/biases/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/biases/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/biases/part_0"
  input: "dnn/hiddenlayer_0/biases/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/biases/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/biases/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights"
  op: "Identity"
  input: "dnn/hiddenlayer_0/weights/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/concat"
  input: "dnn/hiddenlayer_0/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/biases"
  op: "Identity"
  input: "dnn/hiddenlayer_0/biases/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/hiddenlayer_0/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_0/hiddenlayer_0/Relu"
  input: "dnn/zero_fraction/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Mean"
  op: "Mean"
  input: "dnn/zero_fraction/Cast"
  input: "dnn/zero_fraction/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0_fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0_fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0_fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_0_fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0_activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0_activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0_activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_0_activation/tag"
  input: "dnn/hiddenlayer_0/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4472135901451111
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4472135901451111
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_1/weights/part_0"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_1/weights/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/biases/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/biases/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/biases/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_1/biases/part_0"
  input: "dnn/hiddenlayer_1/biases/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/biases/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_1/biases/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights"
  op: "Identity"
  input: "dnn/hiddenlayer_1/weights/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/hiddenlayer_0/Relu"
  input: "dnn/hiddenlayer_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/biases"
  op: "Identity"
  input: "dnn/hiddenlayer_1/biases/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/hiddenlayer_1/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_1/hiddenlayer_1/Relu"
  input: "dnn/zero_fraction_1/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Mean"
  op: "Mean"
  input: "dnn/zero_fraction_1/Cast"
  input: "dnn/zero_fraction_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1_fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1_fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1_fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_1_fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1_activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1_activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1_activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_1_activation/tag"
  input: "dnn/hiddenlayer_1/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4472135901451111
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4472135901451111
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_2/weights/part_0"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_2/weights/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/biases/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/biases/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/biases/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_2/biases/part_0"
  input: "dnn/hiddenlayer_2/biases/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/biases/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_2/biases/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights"
  op: "Identity"
  input: "dnn/hiddenlayer_2/weights/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/hiddenlayer_1/Relu"
  input: "dnn/hiddenlayer_2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/biases"
  op: "Identity"
  input: "dnn/hiddenlayer_2/biases/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_2/MatMul"
  input: "dnn/hiddenlayer_2/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/hiddenlayer_2/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_2/hiddenlayer_2/Relu"
  input: "dnn/zero_fraction_2/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Mean"
  op: "Mean"
  input: "dnn/zero_fraction_2/Cast"
  input: "dnn/zero_fraction_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2_fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_2_fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2_fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_2_fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_2/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2_activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_2_activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2_activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_2_activation/tag"
  input: "dnn/hiddenlayer_2/hiddenlayer_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.7385489344596863
      }
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7385489344596863
      }
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform/max"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform/mul"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/weights/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/weights/part_0"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/read"
  op: "Identity"
  input: "dnn/logits/weights/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/biases/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/biases/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/biases/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/biases/part_0"
  input: "dnn/logits/biases/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/biases/part_0/read"
  op: "Identity"
  input: "dnn/logits/biases/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/weights"
  op: "Identity"
  input: "dnn/logits/weights/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_2/hiddenlayer_2/Relu"
  input: "dnn/logits/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/biases"
  op: "Identity"
  input: "dnn/logits/biases/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_3/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/Equal"
  op: "Equal"
  input: "dnn/logits/BiasAdd"
  input: "dnn/zero_fraction_3/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_3/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/Mean"
  op: "Mean"
  input: "dnn/zero_fraction_3/Cast"
  input: "dnn/zero_fraction_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/logits_fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits_fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits_fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/logits_fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_3/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits_activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits_activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits_activation"
  op: "HistogramSummary"
  input: "dnn/dnn/logits_activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/predictions/zeros_like"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/predictions/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/predictions/concat"
  op: "ConcatV2"
  input: "dnn/binary_logistic_head/predictions/zeros_like"
  input: "dnn/logits/BiasAdd"
  input: "dnn/binary_logistic_head/predictions/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/predictions/logistic"
  op: "Sigmoid"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/predictions/probabilities"
  op: "Softmax"
  input: "dnn/binary_logistic_head/predictions/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/predictions/classes/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/predictions/classes"
  op: "ArgMax"
  input: "dnn/binary_logistic_head/predictions/concat"
  input: "dnn/binary_logistic_head/predictions/classes/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/log_loss_with_two_classes/ToFloat"
  op: "Cast"
  input: "Const_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/log_loss_with_two_classes/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/log_loss_with_two_classes/ExpandDims"
  op: "ExpandDims"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/ToFloat"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/log_loss_with_two_classes/zeros_like"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/log_loss_with_two_classes/GreaterEqual"
  op: "GreaterEqual"
  input: "dnn/logits/BiasAdd"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/log_loss_with_two_classes/Select"
  op: "Select"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/GreaterEqual"
  input: "dnn/logits/BiasAdd"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/log_loss_with_two_classes/Neg"
  op: "Neg"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/log_loss_with_two_classes/Select_1"
  op: "Select"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/GreaterEqual"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/Neg"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/log_loss_with_two_classes/mul"
  op: "Mul"
  input: "dnn/logits/BiasAdd"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/log_loss_with_two_classes/sub"
  op: "Sub"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/Select"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/log_loss_with_two_classes/Exp"
  op: "Exp"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/log_loss_with_two_classes/Log1p"
  op: "Log1p"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/log_loss_with_two_classes"
  op: "Add"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/sub"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/log_loss_with_two_classes/loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/log_loss_with_two_classes/loss"
  op: "Mean"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/ScalarSummary/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/ScalarSummary"
  op: "ScalarSummary"
  input: "dnn/binary_logistic_head/ScalarSummary/tags"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\360\n\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/strided_slice"
  op: "StridedSlice"
  input: "dnn/binary_logistic_head/Shape"
  input: "dnn/binary_logistic_head/strided_slice/stack"
  input: "dnn/binary_logistic_head/strided_slice/stack_1"
  input: "dnn/binary_logistic_head/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/learning_rate/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/dnn/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05000000074505806
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/learning_rate"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/dnn/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/learning_rate/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/dnn/learning_rate"
  input: "dnn/binary_logistic_head/dnn/learning_rate/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/dnn/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/learning_rate/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/dnn/learning_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/dnn/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/Fill"
  op: "Fill"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/Shape"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Reshape"
  op: "Reshape"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/Fill"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Tile/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\360\n\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Tile"
  op: "Tile"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Reshape"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\360\n\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Prod"
  op: "Prod"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Shape"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Prod_1"
  op: "Prod"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Shape_1"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Maximum"
  op: "Maximum"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Prod_1"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/floordiv"
  op: "FloorDiv"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Prod"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Cast"
  op: "Cast"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/truediv"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Tile"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\360\n\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\360\n\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/Shape"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/Sum"
  op: "Sum"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/truediv"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/Reshape"
  op: "Reshape"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/Sum"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/Sum_1"
  op: "Sum"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/loss_grad/truediv"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/Sum_1"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/Reshape"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/Reshape_1"
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/Reshape"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/Reshape_1"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\360\n\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\360\n\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/Shape"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/Sum"
  op: "Sum"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/tuple/control_dependency"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/Reshape"
  op: "Reshape"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/Sum"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/Sum_1"
  op: "Sum"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/tuple/control_dependency"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/Neg"
  op: "Neg"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/Neg"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/Reshape"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/Reshape_1"
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/Reshape"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/Reshape_1"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Log1p_grad/add/x"
  op: "Const"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/tuple/control_dependency_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Log1p_grad/add"
  op: "Add"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Log1p_grad/add/x"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Log1p_grad/Reciprocal"
  op: "Reciprocal"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Log1p_grad/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Log1p_grad/mul"
  op: "Mul"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes_grad/tuple/control_dependency_1"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Log1p_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_grad/zeros_like"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_grad/Select"
  op: "Select"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/GreaterEqual"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/tuple/control_dependency"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_grad/Select_1"
  op: "Select"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/GreaterEqual"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_grad/zeros_like"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_grad/Select"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_grad/Select_1"
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_grad/Select"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_grad/Select_1"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\360\n\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\360\n\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/Shape"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/mul"
  op: "Mul"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/tuple/control_dependency_1"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/Sum"
  op: "Sum"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/mul"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/Sum"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/mul_1"
  op: "Mul"
  input: "dnn/logits/BiasAdd"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/mul_1"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/Sum_1"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/Reshape"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/Reshape_1"
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/Reshape"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/Reshape_1"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Exp_grad/mul"
  op: "Mul"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Log1p_grad/mul"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_1_grad/zeros_like"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_1_grad/Select"
  op: "Select"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/GreaterEqual"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Exp_grad/mul"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_1_grad/Select_1"
  op: "Select"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/GreaterEqual"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_1_grad/zeros_like"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Exp_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_1_grad/Select"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_1_grad/Select_1"
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_1_grad/Select"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_1_grad/Select_1"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Neg_grad/Neg"
  op: "Neg"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/AddN"
  op: "AddN"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_grad/tuple/control_dependency"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/mul_grad/tuple/control_dependency"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_1_grad/tuple/control_dependency_1"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Neg_grad/Neg"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/AddN"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/AddN"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/binary_logistic_head/log_loss_with_two_classes/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/logits/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_2/hiddenlayer_2/Relu"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/MatMul_1"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_2/hiddenlayer_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/Relu_grad/ReluGrad"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/Relu_grad/ReluGrad"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/hiddenlayer_1/Relu"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/Relu_grad/ReluGrad"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/Relu_grad/ReluGrad"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/hiddenlayer_0/Relu"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/Relu_grad/ReluGrad"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/Relu_grad/ReluGrad"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/concat"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  input: "^dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/logits/weights/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/logits/weights/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/logits/weights/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/dnn/dnn/logits/weights/part_0/Adagrad"
  input: "dnn/binary_logistic_head/dnn/dnn/logits/weights/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/logits/weights/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/dnn/dnn/logits/weights/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/logits/biases/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/logits/biases/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/logits/biases/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/dnn/dnn/logits/biases/part_0/Adagrad"
  input: "dnn/binary_logistic_head/dnn/dnn/logits/biases/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/dnn/dnn/logits/biases/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/dnn/dnn/logits/biases/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/train/update_dnn/hiddenlayer_0/weights/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_0/weights/part_0"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
  input: "dnn/binary_logistic_head/dnn/learning_rate/read"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/train/update_dnn/hiddenlayer_0/biases/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_0/biases/part_0"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
  input: "dnn/binary_logistic_head/dnn/learning_rate/read"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/train/update_dnn/hiddenlayer_1/weights/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_1/weights/part_0"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
  input: "dnn/binary_logistic_head/dnn/learning_rate/read"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/train/update_dnn/hiddenlayer_1/biases/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_1/biases/part_0"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
  input: "dnn/binary_logistic_head/dnn/learning_rate/read"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/train/update_dnn/hiddenlayer_2/weights/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_2/weights/part_0"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
  input: "dnn/binary_logistic_head/dnn/learning_rate/read"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/train/update_dnn/hiddenlayer_2/biases/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_2/biases/part_0"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
  input: "dnn/binary_logistic_head/dnn/learning_rate/read"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/train/update_dnn/logits/weights/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/logits/weights/part_0"
  input: "dnn/binary_logistic_head/dnn/dnn/logits/weights/part_0/Adagrad"
  input: "dnn/binary_logistic_head/dnn/learning_rate/read"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/train/update_dnn/logits/biases/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/logits/biases/part_0"
  input: "dnn/binary_logistic_head/dnn/dnn/logits/biases/part_0/Adagrad"
  input: "dnn/binary_logistic_head/dnn/learning_rate/read"
  input: "dnn/binary_logistic_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/train/update"
  op: "NoOp"
  input: "^dnn/binary_logistic_head/train_op/dnn/train/update_dnn/hiddenlayer_0/weights/part_0/ApplyAdagrad"
  input: "^dnn/binary_logistic_head/train_op/dnn/train/update_dnn/hiddenlayer_0/biases/part_0/ApplyAdagrad"
  input: "^dnn/binary_logistic_head/train_op/dnn/train/update_dnn/hiddenlayer_1/weights/part_0/ApplyAdagrad"
  input: "^dnn/binary_logistic_head/train_op/dnn/train/update_dnn/hiddenlayer_1/biases/part_0/ApplyAdagrad"
  input: "^dnn/binary_logistic_head/train_op/dnn/train/update_dnn/hiddenlayer_2/weights/part_0/ApplyAdagrad"
  input: "^dnn/binary_logistic_head/train_op/dnn/train/update_dnn/hiddenlayer_2/biases/part_0/ApplyAdagrad"
  input: "^dnn/binary_logistic_head/train_op/dnn/train/update_dnn/logits/weights/part_0/ApplyAdagrad"
  input: "^dnn/binary_logistic_head/train_op/dnn/train/update_dnn/logits/biases/part_0/ApplyAdagrad"
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/train/value"
  op: "Const"
  input: "^dnn/binary_logistic_head/train_op/dnn/train/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/train"
  op: "AssignAdd"
  input: "global_step"
  input: "dnn/binary_logistic_head/train_op/dnn/train/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/train_op/dnn/control_dependency"
  op: "Identity"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/loss"
  input: "^dnn/binary_logistic_head/train_op/dnn/train"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/log_loss_with_two_classes/loss"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/total"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/total/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/mean/total"
  input: "dnn/binary_logistic_head/metrics/mean/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/total/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/mean/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/zeros_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/count"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/count/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/mean/count"
  input: "dnn/binary_logistic_head/metrics/mean/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/count/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/mean/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/ToFloat_1"
  op: "Cast"
  input: "dnn/binary_logistic_head/metrics/mean/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/Sum"
  op: "Sum"
  input: "dnn/binary_logistic_head/log_loss_with_two_classes/loss"
  input: "dnn/binary_logistic_head/metrics/mean/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/AssignAdd"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/mean/total"
  input: "dnn/binary_logistic_head/metrics/mean/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/AssignAdd_1"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/mean/count"
  input: "dnn/binary_logistic_head/metrics/mean/ToFloat_1"
  input: "^dnn/binary_logistic_head/log_loss_with_two_classes/loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/Greater/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/Greater"
  op: "Greater"
  input: "dnn/binary_logistic_head/metrics/mean/count/read"
  input: "dnn/binary_logistic_head/metrics/mean/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/truediv"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/mean/total/read"
  input: "dnn/binary_logistic_head/metrics/mean/count/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/value/e"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/value"
  op: "Select"
  input: "dnn/binary_logistic_head/metrics/mean/Greater"
  input: "dnn/binary_logistic_head/metrics/mean/truediv"
  input: "dnn/binary_logistic_head/metrics/mean/value/e"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/Greater_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/Greater_1"
  op: "Greater"
  input: "dnn/binary_logistic_head/metrics/mean/AssignAdd_1"
  input: "dnn/binary_logistic_head/metrics/mean/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/truediv_1"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/mean/AssignAdd"
  input: "dnn/binary_logistic_head/metrics/mean/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/update_op/e"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean/update_op"
  op: "Select"
  input: "dnn/binary_logistic_head/metrics/mean/Greater_1"
  input: "dnn/binary_logistic_head/metrics/mean/truediv_1"
  input: "dnn/binary_logistic_head/metrics/mean/update_op/e"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/Cast"
  op: "Cast"
  input: "dnn/binary_logistic_head/predictions/classes"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/Equal"
  op: "Equal"
  input: "dnn/binary_logistic_head/metrics/Cast"
  input: "Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/ToFloat"
  op: "Cast"
  input: "dnn/binary_logistic_head/metrics/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/total"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/total/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/accuracy/total"
  input: "dnn/binary_logistic_head/metrics/accuracy/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/total/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/accuracy/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/zeros_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/count"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/count/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/accuracy/count"
  input: "dnn/binary_logistic_head/metrics/accuracy/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/count/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/accuracy/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2800
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/ToFloat_1"
  op: "Cast"
  input: "dnn/binary_logistic_head/metrics/accuracy/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/Sum"
  op: "Sum"
  input: "dnn/binary_logistic_head/metrics/ToFloat"
  input: "dnn/binary_logistic_head/metrics/accuracy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/AssignAdd"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/accuracy/total"
  input: "dnn/binary_logistic_head/metrics/accuracy/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/AssignAdd_1"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/accuracy/count"
  input: "dnn/binary_logistic_head/metrics/accuracy/ToFloat_1"
  input: "^dnn/binary_logistic_head/metrics/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/Greater/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/Greater"
  op: "Greater"
  input: "dnn/binary_logistic_head/metrics/accuracy/count/read"
  input: "dnn/binary_logistic_head/metrics/accuracy/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/truediv"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/accuracy/total/read"
  input: "dnn/binary_logistic_head/metrics/accuracy/count/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/value/e"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/value"
  op: "Select"
  input: "dnn/binary_logistic_head/metrics/accuracy/Greater"
  input: "dnn/binary_logistic_head/metrics/accuracy/truediv"
  input: "dnn/binary_logistic_head/metrics/accuracy/value/e"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/Greater_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/Greater_1"
  op: "Greater"
  input: "dnn/binary_logistic_head/metrics/accuracy/AssignAdd_1"
  input: "dnn/binary_logistic_head/metrics/accuracy/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/truediv_1"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/accuracy/AssignAdd"
  input: "dnn/binary_logistic_head/metrics/accuracy/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/update_op/e"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy/update_op"
  op: "Select"
  input: "dnn/binary_logistic_head/metrics/accuracy/Greater_1"
  input: "dnn/binary_logistic_head/metrics/accuracy/truediv_1"
  input: "dnn/binary_logistic_head/metrics/accuracy/update_op/e"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/total"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/total/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/mean_1/total"
  input: "dnn/binary_logistic_head/metrics/mean_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/total/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/mean_1/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/zeros_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/count"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/count/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/mean_1/count"
  input: "dnn/binary_logistic_head/metrics/mean_1/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/count/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/mean_1/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2800
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/ToFloat_1"
  op: "Cast"
  input: "dnn/binary_logistic_head/metrics/mean_1/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/Sum"
  op: "Sum"
  input: "dnn/binary_logistic_head/predictions/logistic"
  input: "dnn/binary_logistic_head/metrics/mean_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/AssignAdd"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/mean_1/total"
  input: "dnn/binary_logistic_head/metrics/mean_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/AssignAdd_1"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/mean_1/count"
  input: "dnn/binary_logistic_head/metrics/mean_1/ToFloat_1"
  input: "^dnn/binary_logistic_head/predictions/logistic"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/Greater/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/Greater"
  op: "Greater"
  input: "dnn/binary_logistic_head/metrics/mean_1/count/read"
  input: "dnn/binary_logistic_head/metrics/mean_1/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/truediv"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/mean_1/total/read"
  input: "dnn/binary_logistic_head/metrics/mean_1/count/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/value/e"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/value"
  op: "Select"
  input: "dnn/binary_logistic_head/metrics/mean_1/Greater"
  input: "dnn/binary_logistic_head/metrics/mean_1/truediv"
  input: "dnn/binary_logistic_head/metrics/mean_1/value/e"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/Greater_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/Greater_1"
  op: "Greater"
  input: "dnn/binary_logistic_head/metrics/mean_1/AssignAdd_1"
  input: "dnn/binary_logistic_head/metrics/mean_1/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/truediv_1"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/mean_1/AssignAdd"
  input: "dnn/binary_logistic_head/metrics/mean_1/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/update_op/e"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_1/update_op"
  op: "Select"
  input: "dnn/binary_logistic_head/metrics/mean_1/Greater_1"
  input: "dnn/binary_logistic_head/metrics/mean_1/truediv_1"
  input: "dnn/binary_logistic_head/metrics/mean_1/update_op/e"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/ToFloat_2"
  op: "Cast"
  input: "Const_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/total"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/total/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/mean_2/total"
  input: "dnn/binary_logistic_head/metrics/mean_2/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_2/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/total/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/mean_2/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_2/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/zeros_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/count"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/count/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/mean_2/count"
  input: "dnn/binary_logistic_head/metrics/mean_2/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_2/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/count/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/mean_2/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_2/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2800
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/ToFloat_1"
  op: "Cast"
  input: "dnn/binary_logistic_head/metrics/mean_2/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/Sum"
  op: "Sum"
  input: "dnn/binary_logistic_head/metrics/ToFloat_2"
  input: "dnn/binary_logistic_head/metrics/mean_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/AssignAdd"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/mean_2/total"
  input: "dnn/binary_logistic_head/metrics/mean_2/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_2/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/AssignAdd_1"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/mean_2/count"
  input: "dnn/binary_logistic_head/metrics/mean_2/ToFloat_1"
  input: "^dnn/binary_logistic_head/metrics/ToFloat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_2/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/Greater/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/Greater"
  op: "Greater"
  input: "dnn/binary_logistic_head/metrics/mean_2/count/read"
  input: "dnn/binary_logistic_head/metrics/mean_2/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/truediv"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/mean_2/total/read"
  input: "dnn/binary_logistic_head/metrics/mean_2/count/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/value/e"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/value"
  op: "Select"
  input: "dnn/binary_logistic_head/metrics/mean_2/Greater"
  input: "dnn/binary_logistic_head/metrics/mean_2/truediv"
  input: "dnn/binary_logistic_head/metrics/mean_2/value/e"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/Greater_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/Greater_1"
  op: "Greater"
  input: "dnn/binary_logistic_head/metrics/mean_2/AssignAdd_1"
  input: "dnn/binary_logistic_head/metrics/mean_2/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/truediv_1"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/mean_2/AssignAdd"
  input: "dnn/binary_logistic_head/metrics/mean_2/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/update_op/e"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_2/update_op"
  op: "Select"
  input: "dnn/binary_logistic_head/metrics/mean_2/Greater_1"
  input: "dnn/binary_logistic_head/metrics/mean_2/truediv_1"
  input: "dnn/binary_logistic_head/metrics/mean_2/update_op/e"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/ToFloat_3"
  op: "Cast"
  input: "Const_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/total"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/total/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/mean_3/total"
  input: "dnn/binary_logistic_head/metrics/mean_3/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_3/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/total/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/mean_3/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_3/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/zeros_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/count"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/count/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/mean_3/count"
  input: "dnn/binary_logistic_head/metrics/mean_3/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_3/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/count/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/mean_3/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_3/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2800
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/ToFloat_1"
  op: "Cast"
  input: "dnn/binary_logistic_head/metrics/mean_3/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/Sum"
  op: "Sum"
  input: "dnn/binary_logistic_head/metrics/ToFloat_3"
  input: "dnn/binary_logistic_head/metrics/mean_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/AssignAdd"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/mean_3/total"
  input: "dnn/binary_logistic_head/metrics/mean_3/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_3/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/AssignAdd_1"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/mean_3/count"
  input: "dnn/binary_logistic_head/metrics/mean_3/ToFloat_1"
  input: "^dnn/binary_logistic_head/metrics/ToFloat_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_3/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/Greater/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/Greater"
  op: "Greater"
  input: "dnn/binary_logistic_head/metrics/mean_3/count/read"
  input: "dnn/binary_logistic_head/metrics/mean_3/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/truediv"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/mean_3/total/read"
  input: "dnn/binary_logistic_head/metrics/mean_3/count/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/value/e"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/value"
  op: "Select"
  input: "dnn/binary_logistic_head/metrics/mean_3/Greater"
  input: "dnn/binary_logistic_head/metrics/mean_3/truediv"
  input: "dnn/binary_logistic_head/metrics/mean_3/value/e"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/Greater_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/Greater_1"
  op: "Greater"
  input: "dnn/binary_logistic_head/metrics/mean_3/AssignAdd_1"
  input: "dnn/binary_logistic_head/metrics/mean_3/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/truediv_1"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/mean_3/AssignAdd"
  input: "dnn/binary_logistic_head/metrics/mean_3/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/update_op/e"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/mean_3/update_op"
  op: "Select"
  input: "dnn/binary_logistic_head/metrics/mean_3/Greater_1"
  input: "dnn/binary_logistic_head/metrics/mean_3/truediv_1"
  input: "dnn/binary_logistic_head/metrics/mean_3/update_op/e"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/Cast_1"
  op: "Cast"
  input: "Const_1"
  attr {
    key: "DstT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/remove_squeezable_dimensions/Squeeze"
  op: "Squeeze"
  input: "dnn/binary_logistic_head/predictions/logistic"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/Reshape"
  op: "Reshape"
  input: "dnn/binary_logistic_head/metrics/auc/remove_squeezable_dimensions/Squeeze"
  input: "dnn/binary_logistic_head/metrics/auc/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/Reshape_1"
  op: "Reshape"
  input: "dnn/binary_logistic_head/metrics/Cast_1"
  input: "dnn/binary_logistic_head/metrics/auc/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        tensor_content: "\225\277\326\263\317\251\244;\317\251$<\267\376v<\317\251\244<C\324\315<\267\376\366<\225\024\020=\317\251$=\t?9=C\324M=}ib=\267\376v=\370\311\205=\225\024\220=2_\232=\317\251\244=l\364\256=\t?\271=\246\211\303=C\324\315=\340\036\330=}i\342=\032\264\354=\267\376\366=\252\244\000>\370\311\005>G\357\n>\225\024\020>\3449\025>2_\032>\201\204\037>\317\251$>\036\317)>l\364.>\273\0314>\t?9>Wd>>\246\211C>\364\256H>C\324M>\221\371R>\340\036X>.D]>}ib>\313\216g>\032\264l>h\331q>\267\376v>\005$|>\252\244\200>Q7\203>\370\311\205>\240\\\210>G\357\212>\356\201\215>\225\024\220><\247\222>\3449\225>\213\314\227>2_\232>\331\361\234>\201\204\237>(\027\242>\317\251\244>v<\247>\036\317\251>\305a\254>l\364\256>\023\207\261>\273\031\264>b\254\266>\t?\271>\260\321\273>Wd\276>\377\366\300>\246\211\303>M\034\306>\364\256\310>\234A\313>C\324\315>\352f\320>\221\371\322>9\214\325>\340\036\330>\207\261\332>.D\335>\326\326\337>}i\342>$\374\344>\313\216\347>r!\352>\032\264\354>\301F\357>h\331\361>\017l\364>\267\376\366>^\221\371>\005$\374>\254\266\376>\252\244\000?\375\355\001?Q7\003?\245\200\004?\370\311\005?L\023\007?\240\\\010?\363\245\t?G\357\n?\2328\014?\356\201\r?B\313\016?\225\024\020?\351]\021?<\247\022?\220\360\023?\3449\025?7\203\026?\213\314\027?\337\025\031?2_\032?\206\250\033?\331\361\034?-;\036?\201\204\037?\324\315 ?(\027\"?{`#?\317\251$?#\363%?v<\'?\312\205(?\036\317)?q\030+?\305a,?\030\253-?l\364.?\300=0?\023\2071?g\3202?\273\0314?\016c5?b\2546?\265\3657?\t?9?]\210:?\260\321;?\004\033=?Wd>?\253\255??\377\366@?R@B?\246\211C?\372\322D?M\034F?\241eG?\364\256H?H\370I?\234AK?\357\212L?C\324M?\227\035O?\352fP?>\260Q?\221\371R?\345BT?9\214U?\214\325V?\340\036X?3hY?\207\261Z?\333\372[?.D]?\202\215^?\326\326_?) a?}ib?\320\262c?$\374d?xEf?\313\216g?\037\330h?r!j?\306jk?\032\264l?m\375m?\301Fo?\025\220p?h\331q?\274\"s?\017lt?c\265u?\267\376v?\nHx?^\221y?\262\332z?\005$|?Ym}?\254\266~?\001\000\200?"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/ExpandDims"
  op: "ExpandDims"
  input: "dnn/binary_logistic_head/metrics/auc/Const"
  input: "dnn/binary_logistic_head/metrics/auc/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\360\n\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/Tile"
  op: "Tile"
  input: "dnn/binary_logistic_head/metrics/auc/ExpandDims"
  input: "dnn/binary_logistic_head/metrics/auc/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/transpose/Rank"
  op: "Rank"
  input: "dnn/binary_logistic_head/metrics/auc/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/transpose/sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/transpose/sub"
  op: "Sub"
  input: "dnn/binary_logistic_head/metrics/auc/transpose/Rank"
  input: "dnn/binary_logistic_head/metrics/auc/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/transpose/Range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/transpose/Range"
  op: "Range"
  input: "dnn/binary_logistic_head/metrics/auc/transpose/Range/start"
  input: "dnn/binary_logistic_head/metrics/auc/transpose/Rank"
  input: "dnn/binary_logistic_head/metrics/auc/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/transpose/sub_1"
  op: "Sub"
  input: "dnn/binary_logistic_head/metrics/auc/transpose/sub"
  input: "dnn/binary_logistic_head/metrics/auc/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/transpose"
  op: "Transpose"
  input: "dnn/binary_logistic_head/metrics/auc/Reshape"
  input: "dnn/binary_logistic_head/metrics/auc/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/Tile_1/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/Tile_1"
  op: "Tile"
  input: "dnn/binary_logistic_head/metrics/auc/transpose"
  input: "dnn/binary_logistic_head/metrics/auc/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/Greater"
  op: "Greater"
  input: "dnn/binary_logistic_head/metrics/auc/Tile_1"
  input: "dnn/binary_logistic_head/metrics/auc/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/LogicalNot"
  op: "LogicalNot"
  input: "dnn/binary_logistic_head/metrics/auc/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/Tile_2/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/Tile_2"
  op: "Tile"
  input: "dnn/binary_logistic_head/metrics/auc/Reshape_1"
  input: "dnn/binary_logistic_head/metrics/auc/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/LogicalNot_1"
  op: "LogicalNot"
  input: "dnn/binary_logistic_head/metrics/auc/Tile_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/true_positives"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/true_positives/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/auc/true_positives"
  input: "dnn/binary_logistic_head/metrics/auc/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/true_positives/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/auc/true_positives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/LogicalAnd"
  op: "LogicalAnd"
  input: "dnn/binary_logistic_head/metrics/auc/Tile_2"
  input: "dnn/binary_logistic_head/metrics/auc/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/ToFloat_1"
  op: "Cast"
  input: "dnn/binary_logistic_head/metrics/auc/LogicalAnd"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/Sum"
  op: "Sum"
  input: "dnn/binary_logistic_head/metrics/auc/ToFloat_1"
  input: "dnn/binary_logistic_head/metrics/auc/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/AssignAdd"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/auc/true_positives"
  input: "dnn/binary_logistic_head/metrics/auc/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/zeros_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/false_negatives"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/false_negatives/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/auc/false_negatives"
  input: "dnn/binary_logistic_head/metrics/auc/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/false_negatives/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/auc/false_negatives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/LogicalAnd_1"
  op: "LogicalAnd"
  input: "dnn/binary_logistic_head/metrics/auc/Tile_2"
  input: "dnn/binary_logistic_head/metrics/auc/LogicalNot"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/ToFloat_2"
  op: "Cast"
  input: "dnn/binary_logistic_head/metrics/auc/LogicalAnd_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/Sum_1"
  op: "Sum"
  input: "dnn/binary_logistic_head/metrics/auc/ToFloat_2"
  input: "dnn/binary_logistic_head/metrics/auc/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/AssignAdd_1"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/auc/false_negatives"
  input: "dnn/binary_logistic_head/metrics/auc/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/zeros_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/true_negatives"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/true_negatives/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/auc/true_negatives"
  input: "dnn/binary_logistic_head/metrics/auc/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/true_negatives/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/auc/true_negatives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/LogicalAnd_2"
  op: "LogicalAnd"
  input: "dnn/binary_logistic_head/metrics/auc/LogicalNot_1"
  input: "dnn/binary_logistic_head/metrics/auc/LogicalNot"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/ToFloat_3"
  op: "Cast"
  input: "dnn/binary_logistic_head/metrics/auc/LogicalAnd_2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/Sum_2/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/Sum_2"
  op: "Sum"
  input: "dnn/binary_logistic_head/metrics/auc/ToFloat_3"
  input: "dnn/binary_logistic_head/metrics/auc/Sum_2/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/AssignAdd_2"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/auc/true_negatives"
  input: "dnn/binary_logistic_head/metrics/auc/Sum_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/zeros_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/false_positives"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/false_positives/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/auc/false_positives"
  input: "dnn/binary_logistic_head/metrics/auc/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/false_positives/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/auc/false_positives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/LogicalAnd_3"
  op: "LogicalAnd"
  input: "dnn/binary_logistic_head/metrics/auc/LogicalNot_1"
  input: "dnn/binary_logistic_head/metrics/auc/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/ToFloat_4"
  op: "Cast"
  input: "dnn/binary_logistic_head/metrics/auc/LogicalAnd_3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/Sum_3/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/Sum_3"
  op: "Sum"
  input: "dnn/binary_logistic_head/metrics/auc/ToFloat_4"
  input: "dnn/binary_logistic_head/metrics/auc/Sum_3/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/AssignAdd_3"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/auc/false_positives"
  input: "dnn/binary_logistic_head/metrics/auc/Sum_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/add"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc/true_positives/read"
  input: "dnn/binary_logistic_head/metrics/auc/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/add_1"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc/true_positives/read"
  input: "dnn/binary_logistic_head/metrics/auc/false_negatives/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/add_2/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/add_2"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc/add_1"
  input: "dnn/binary_logistic_head/metrics/auc/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/div"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/auc/add"
  input: "dnn/binary_logistic_head/metrics/auc/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/add_3"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc/false_positives/read"
  input: "dnn/binary_logistic_head/metrics/auc/true_negatives/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/add_4/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/add_4"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc/add_3"
  input: "dnn/binary_logistic_head/metrics/auc/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/div_1"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/auc/false_positives/read"
  input: "dnn/binary_logistic_head/metrics/auc/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 199
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice"
  op: "StridedSlice"
  input: "dnn/binary_logistic_head/metrics/auc/div_1"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice/stack"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice/stack_1"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_1"
  op: "StridedSlice"
  input: "dnn/binary_logistic_head/metrics/auc/div_1"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_1/stack"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_1/stack_1"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/sub"
  op: "Sub"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 199
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_2"
  op: "StridedSlice"
  input: "dnn/binary_logistic_head/metrics/auc/div"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_2/stack"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_2/stack_1"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_3"
  op: "StridedSlice"
  input: "dnn/binary_logistic_head/metrics/auc/div"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_3/stack"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_3/stack_1"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/add_5"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_2"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/truediv/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/truediv"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/auc/add_5"
  input: "dnn/binary_logistic_head/metrics/auc/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/Mul"
  op: "Mul"
  input: "dnn/binary_logistic_head/metrics/auc/sub"
  input: "dnn/binary_logistic_head/metrics/auc/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/value"
  op: "Sum"
  input: "dnn/binary_logistic_head/metrics/auc/Mul"
  input: "dnn/binary_logistic_head/metrics/auc/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/add_6/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/add_6"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc/AssignAdd"
  input: "dnn/binary_logistic_head/metrics/auc/add_6/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/add_7"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc/AssignAdd"
  input: "dnn/binary_logistic_head/metrics/auc/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/add_8/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/add_8"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc/add_7"
  input: "dnn/binary_logistic_head/metrics/auc/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/div_2"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/auc/add_6"
  input: "dnn/binary_logistic_head/metrics/auc/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/add_9"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc/AssignAdd_3"
  input: "dnn/binary_logistic_head/metrics/auc/AssignAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/add_10/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/add_10"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc/add_9"
  input: "dnn/binary_logistic_head/metrics/auc/add_10/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/div_3"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/auc/AssignAdd_3"
  input: "dnn/binary_logistic_head/metrics/auc/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 199
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_4"
  op: "StridedSlice"
  input: "dnn/binary_logistic_head/metrics/auc/div_3"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_4/stack"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_4/stack_1"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_5"
  op: "StridedSlice"
  input: "dnn/binary_logistic_head/metrics/auc/div_3"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_5/stack"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_5/stack_1"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/sub_1"
  op: "Sub"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_4"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 199
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_6"
  op: "StridedSlice"
  input: "dnn/binary_logistic_head/metrics/auc/div_2"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_6/stack"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_6/stack_1"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/strided_slice_7"
  op: "StridedSlice"
  input: "dnn/binary_logistic_head/metrics/auc/div_2"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_7/stack"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_7/stack_1"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/add_11"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_6"
  input: "dnn/binary_logistic_head/metrics/auc/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/truediv_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/truediv_1"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/auc/add_11"
  input: "dnn/binary_logistic_head/metrics/auc/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/Mul_1"
  op: "Mul"
  input: "dnn/binary_logistic_head/metrics/auc/sub_1"
  input: "dnn/binary_logistic_head/metrics/auc/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc/update_op"
  op: "Sum"
  input: "dnn/binary_logistic_head/metrics/auc/Mul_1"
  input: "dnn/binary_logistic_head/metrics/auc/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/Cast_2"
  op: "Cast"
  input: "Const_1"
  attr {
    key: "DstT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/remove_squeezable_dimensions/Squeeze"
  op: "Squeeze"
  input: "dnn/binary_logistic_head/predictions/logistic"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/Reshape"
  op: "Reshape"
  input: "dnn/binary_logistic_head/metrics/auc_1/remove_squeezable_dimensions/Squeeze"
  input: "dnn/binary_logistic_head/metrics/auc_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/Reshape_1"
  op: "Reshape"
  input: "dnn/binary_logistic_head/metrics/Cast_2"
  input: "dnn/binary_logistic_head/metrics/auc_1/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        tensor_content: "\225\277\326\263\317\251\244;\317\251$<\267\376v<\317\251\244<C\324\315<\267\376\366<\225\024\020=\317\251$=\t?9=C\324M=}ib=\267\376v=\370\311\205=\225\024\220=2_\232=\317\251\244=l\364\256=\t?\271=\246\211\303=C\324\315=\340\036\330=}i\342=\032\264\354=\267\376\366=\252\244\000>\370\311\005>G\357\n>\225\024\020>\3449\025>2_\032>\201\204\037>\317\251$>\036\317)>l\364.>\273\0314>\t?9>Wd>>\246\211C>\364\256H>C\324M>\221\371R>\340\036X>.D]>}ib>\313\216g>\032\264l>h\331q>\267\376v>\005$|>\252\244\200>Q7\203>\370\311\205>\240\\\210>G\357\212>\356\201\215>\225\024\220><\247\222>\3449\225>\213\314\227>2_\232>\331\361\234>\201\204\237>(\027\242>\317\251\244>v<\247>\036\317\251>\305a\254>l\364\256>\023\207\261>\273\031\264>b\254\266>\t?\271>\260\321\273>Wd\276>\377\366\300>\246\211\303>M\034\306>\364\256\310>\234A\313>C\324\315>\352f\320>\221\371\322>9\214\325>\340\036\330>\207\261\332>.D\335>\326\326\337>}i\342>$\374\344>\313\216\347>r!\352>\032\264\354>\301F\357>h\331\361>\017l\364>\267\376\366>^\221\371>\005$\374>\254\266\376>\252\244\000?\375\355\001?Q7\003?\245\200\004?\370\311\005?L\023\007?\240\\\010?\363\245\t?G\357\n?\2328\014?\356\201\r?B\313\016?\225\024\020?\351]\021?<\247\022?\220\360\023?\3449\025?7\203\026?\213\314\027?\337\025\031?2_\032?\206\250\033?\331\361\034?-;\036?\201\204\037?\324\315 ?(\027\"?{`#?\317\251$?#\363%?v<\'?\312\205(?\036\317)?q\030+?\305a,?\030\253-?l\364.?\300=0?\023\2071?g\3202?\273\0314?\016c5?b\2546?\265\3657?\t?9?]\210:?\260\321;?\004\033=?Wd>?\253\255??\377\366@?R@B?\246\211C?\372\322D?M\034F?\241eG?\364\256H?H\370I?\234AK?\357\212L?C\324M?\227\035O?\352fP?>\260Q?\221\371R?\345BT?9\214U?\214\325V?\340\036X?3hY?\207\261Z?\333\372[?.D]?\202\215^?\326\326_?) a?}ib?\320\262c?$\374d?xEf?\313\216g?\037\330h?r!j?\306jk?\032\264l?m\375m?\301Fo?\025\220p?h\331q?\274\"s?\017lt?c\265u?\267\376v?\nHx?^\221y?\262\332z?\005$|?Ym}?\254\266~?\001\000\200?"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/binary_logistic_head/metrics/auc_1/Const"
  input: "dnn/binary_logistic_head/metrics/auc_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\360\n\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/Tile"
  op: "Tile"
  input: "dnn/binary_logistic_head/metrics/auc_1/ExpandDims"
  input: "dnn/binary_logistic_head/metrics/auc_1/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/transpose/Rank"
  op: "Rank"
  input: "dnn/binary_logistic_head/metrics/auc_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/transpose/sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/transpose/sub"
  op: "Sub"
  input: "dnn/binary_logistic_head/metrics/auc_1/transpose/Rank"
  input: "dnn/binary_logistic_head/metrics/auc_1/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/transpose/Range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/transpose/Range"
  op: "Range"
  input: "dnn/binary_logistic_head/metrics/auc_1/transpose/Range/start"
  input: "dnn/binary_logistic_head/metrics/auc_1/transpose/Rank"
  input: "dnn/binary_logistic_head/metrics/auc_1/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/transpose/sub_1"
  op: "Sub"
  input: "dnn/binary_logistic_head/metrics/auc_1/transpose/sub"
  input: "dnn/binary_logistic_head/metrics/auc_1/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/transpose"
  op: "Transpose"
  input: "dnn/binary_logistic_head/metrics/auc_1/Reshape"
  input: "dnn/binary_logistic_head/metrics/auc_1/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/Tile_1"
  op: "Tile"
  input: "dnn/binary_logistic_head/metrics/auc_1/transpose"
  input: "dnn/binary_logistic_head/metrics/auc_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/Greater"
  op: "Greater"
  input: "dnn/binary_logistic_head/metrics/auc_1/Tile_1"
  input: "dnn/binary_logistic_head/metrics/auc_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/LogicalNot"
  op: "LogicalNot"
  input: "dnn/binary_logistic_head/metrics/auc_1/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/Tile_2/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/Tile_2"
  op: "Tile"
  input: "dnn/binary_logistic_head/metrics/auc_1/Reshape_1"
  input: "dnn/binary_logistic_head/metrics/auc_1/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/LogicalNot_1"
  op: "LogicalNot"
  input: "dnn/binary_logistic_head/metrics/auc_1/Tile_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/true_positives"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/true_positives/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/auc_1/true_positives"
  input: "dnn/binary_logistic_head/metrics/auc_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc_1/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/true_positives/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/auc_1/true_positives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc_1/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/LogicalAnd"
  op: "LogicalAnd"
  input: "dnn/binary_logistic_head/metrics/auc_1/Tile_2"
  input: "dnn/binary_logistic_head/metrics/auc_1/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/ToFloat_1"
  op: "Cast"
  input: "dnn/binary_logistic_head/metrics/auc_1/LogicalAnd"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/Sum"
  op: "Sum"
  input: "dnn/binary_logistic_head/metrics/auc_1/ToFloat_1"
  input: "dnn/binary_logistic_head/metrics/auc_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/AssignAdd"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/auc_1/true_positives"
  input: "dnn/binary_logistic_head/metrics/auc_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc_1/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/zeros_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/false_negatives"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/false_negatives/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/auc_1/false_negatives"
  input: "dnn/binary_logistic_head/metrics/auc_1/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc_1/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/false_negatives/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/auc_1/false_negatives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc_1/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/LogicalAnd_1"
  op: "LogicalAnd"
  input: "dnn/binary_logistic_head/metrics/auc_1/Tile_2"
  input: "dnn/binary_logistic_head/metrics/auc_1/LogicalNot"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/ToFloat_2"
  op: "Cast"
  input: "dnn/binary_logistic_head/metrics/auc_1/LogicalAnd_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/Sum_1"
  op: "Sum"
  input: "dnn/binary_logistic_head/metrics/auc_1/ToFloat_2"
  input: "dnn/binary_logistic_head/metrics/auc_1/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/AssignAdd_1"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/auc_1/false_negatives"
  input: "dnn/binary_logistic_head/metrics/auc_1/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc_1/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/zeros_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/true_negatives"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/true_negatives/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/auc_1/true_negatives"
  input: "dnn/binary_logistic_head/metrics/auc_1/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc_1/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/true_negatives/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/auc_1/true_negatives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc_1/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/LogicalAnd_2"
  op: "LogicalAnd"
  input: "dnn/binary_logistic_head/metrics/auc_1/LogicalNot_1"
  input: "dnn/binary_logistic_head/metrics/auc_1/LogicalNot"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/ToFloat_3"
  op: "Cast"
  input: "dnn/binary_logistic_head/metrics/auc_1/LogicalAnd_2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/Sum_2/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/Sum_2"
  op: "Sum"
  input: "dnn/binary_logistic_head/metrics/auc_1/ToFloat_3"
  input: "dnn/binary_logistic_head/metrics/auc_1/Sum_2/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/AssignAdd_2"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/auc_1/true_negatives"
  input: "dnn/binary_logistic_head/metrics/auc_1/Sum_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc_1/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/zeros_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/false_positives"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/false_positives/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/auc_1/false_positives"
  input: "dnn/binary_logistic_head/metrics/auc_1/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc_1/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/false_positives/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/auc_1/false_positives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc_1/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/LogicalAnd_3"
  op: "LogicalAnd"
  input: "dnn/binary_logistic_head/metrics/auc_1/LogicalNot_1"
  input: "dnn/binary_logistic_head/metrics/auc_1/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/ToFloat_4"
  op: "Cast"
  input: "dnn/binary_logistic_head/metrics/auc_1/LogicalAnd_3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/Sum_3/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/Sum_3"
  op: "Sum"
  input: "dnn/binary_logistic_head/metrics/auc_1/ToFloat_4"
  input: "dnn/binary_logistic_head/metrics/auc_1/Sum_3/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/AssignAdd_3"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/auc_1/false_positives"
  input: "dnn/binary_logistic_head/metrics/auc_1/Sum_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc_1/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/add"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc_1/true_positives/read"
  input: "dnn/binary_logistic_head/metrics/auc_1/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/add_1"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc_1/true_positives/read"
  input: "dnn/binary_logistic_head/metrics/auc_1/false_negatives/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/add_2/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/add_2"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc_1/add_1"
  input: "dnn/binary_logistic_head/metrics/auc_1/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/div"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/auc_1/add"
  input: "dnn/binary_logistic_head/metrics/auc_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/add_3/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/add_3"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc_1/true_positives/read"
  input: "dnn/binary_logistic_head/metrics/auc_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/add_4"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc_1/true_positives/read"
  input: "dnn/binary_logistic_head/metrics/auc_1/false_positives/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/add_5/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/add_5"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc_1/add_4"
  input: "dnn/binary_logistic_head/metrics/auc_1/add_5/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/div_1"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/auc_1/add_3"
  input: "dnn/binary_logistic_head/metrics/auc_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 199
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/binary_logistic_head/metrics/auc_1/div"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice/stack"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice/stack_1"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_1"
  op: "StridedSlice"
  input: "dnn/binary_logistic_head/metrics/auc_1/div"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_1/stack"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_1/stack_1"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/sub"
  op: "Sub"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 199
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_2"
  op: "StridedSlice"
  input: "dnn/binary_logistic_head/metrics/auc_1/div_1"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_2/stack"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_2/stack_1"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_3"
  op: "StridedSlice"
  input: "dnn/binary_logistic_head/metrics/auc_1/div_1"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_3/stack"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_3/stack_1"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/add_6"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_2"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/truediv/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/truediv"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/auc_1/add_6"
  input: "dnn/binary_logistic_head/metrics/auc_1/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/Mul"
  op: "Mul"
  input: "dnn/binary_logistic_head/metrics/auc_1/sub"
  input: "dnn/binary_logistic_head/metrics/auc_1/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/value"
  op: "Sum"
  input: "dnn/binary_logistic_head/metrics/auc_1/Mul"
  input: "dnn/binary_logistic_head/metrics/auc_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/add_7/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/add_7"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc_1/AssignAdd"
  input: "dnn/binary_logistic_head/metrics/auc_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/add_8"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc_1/AssignAdd"
  input: "dnn/binary_logistic_head/metrics/auc_1/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/add_9/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/add_9"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc_1/add_8"
  input: "dnn/binary_logistic_head/metrics/auc_1/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/div_2"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/auc_1/add_7"
  input: "dnn/binary_logistic_head/metrics/auc_1/add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/add_10/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/add_10"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc_1/AssignAdd"
  input: "dnn/binary_logistic_head/metrics/auc_1/add_10/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/add_11"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc_1/AssignAdd"
  input: "dnn/binary_logistic_head/metrics/auc_1/AssignAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/add_12/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/add_12"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc_1/add_11"
  input: "dnn/binary_logistic_head/metrics/auc_1/add_12/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/div_3"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/auc_1/add_10"
  input: "dnn/binary_logistic_head/metrics/auc_1/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 199
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_4"
  op: "StridedSlice"
  input: "dnn/binary_logistic_head/metrics/auc_1/div_2"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_4/stack"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_4/stack_1"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_5"
  op: "StridedSlice"
  input: "dnn/binary_logistic_head/metrics/auc_1/div_2"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_5/stack"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_5/stack_1"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/sub_1"
  op: "Sub"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_4"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 199
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_6"
  op: "StridedSlice"
  input: "dnn/binary_logistic_head/metrics/auc_1/div_3"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_6/stack"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_6/stack_1"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_7"
  op: "StridedSlice"
  input: "dnn/binary_logistic_head/metrics/auc_1/div_3"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_7/stack"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_7/stack_1"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/add_13"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_6"
  input: "dnn/binary_logistic_head/metrics/auc_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/truediv_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/truediv_1"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/auc_1/add_13"
  input: "dnn/binary_logistic_head/metrics/auc_1/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/Mul_1"
  op: "Mul"
  input: "dnn/binary_logistic_head/metrics/auc_1/sub_1"
  input: "dnn/binary_logistic_head/metrics/auc_1/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/auc_1/update_op"
  op: "Sum"
  input: "dnn/binary_logistic_head/metrics/auc_1/Mul_1"
  input: "dnn/binary_logistic_head/metrics/auc_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/GreaterEqual"
  op: "GreaterEqual"
  input: "dnn/binary_logistic_head/predictions/logistic"
  input: "dnn/binary_logistic_head/metrics/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/ToFloat_6"
  op: "Cast"
  input: "dnn/binary_logistic_head/metrics/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/remove_squeezable_dimensions_1/Squeeze"
  op: "Squeeze"
  input: "dnn/binary_logistic_head/metrics/ToFloat_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/Cast_3"
  op: "Cast"
  input: "dnn/binary_logistic_head/metrics/remove_squeezable_dimensions_1/Squeeze"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/Equal_1"
  op: "Equal"
  input: "dnn/binary_logistic_head/metrics/Cast_3"
  input: "Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/ToFloat_7"
  op: "Cast"
  input: "dnn/binary_logistic_head/metrics/Equal_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/total"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/total/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/total"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/accuracy_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/total/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/accuracy_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/zeros_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/count"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/count/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/count"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/accuracy_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/count/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/accuracy_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2800
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/ToFloat_1"
  op: "Cast"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/Sum"
  op: "Sum"
  input: "dnn/binary_logistic_head/metrics/ToFloat_7"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/AssignAdd"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/total"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/accuracy_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/AssignAdd_1"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/count"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/ToFloat_1"
  input: "^dnn/binary_logistic_head/metrics/ToFloat_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/accuracy_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/Greater/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/Greater"
  op: "Greater"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/count/read"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/truediv"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/total/read"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/count/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/value/e"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/value"
  op: "Select"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/Greater"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/truediv"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/value/e"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/Greater_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/Greater_1"
  op: "Greater"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/AssignAdd_1"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/truediv_1"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/AssignAdd"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/update_op/e"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/accuracy_1/update_op"
  op: "Select"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/Greater_1"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/truediv_1"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/update_op/e"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Cast"
  op: "Cast"
  input: "Const_1"
  attr {
    key: "DstT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/remove_squeezable_dimensions/Squeeze"
  op: "Squeeze"
  input: "dnn/binary_logistic_head/predictions/logistic"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Reshape"
  op: "Reshape"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/remove_squeezable_dimensions/Squeeze"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Reshape_1"
  op: "Reshape"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Cast"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/ExpandDims"
  op: "ExpandDims"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Const"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\360\n\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Tile"
  op: "Tile"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/ExpandDims"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/transpose/Rank"
  op: "Rank"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/transpose/sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/transpose/sub"
  op: "Sub"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/transpose/Rank"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/transpose/Range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/transpose/Range"
  op: "Range"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/transpose/Range/start"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/transpose/Rank"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/transpose/sub_1"
  op: "Sub"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/transpose/sub"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/transpose"
  op: "Transpose"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Reshape"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Tile_1/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Tile_1"
  op: "Tile"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/transpose"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Greater"
  op: "Greater"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Tile_1"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Tile_2/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Tile_2"
  op: "Tile"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Reshape_1"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/LogicalNot"
  op: "LogicalNot"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Tile_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/true_positives"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/true_positives/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/true_positives"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/precision_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/true_positives/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/true_positives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/precision_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/LogicalAnd"
  op: "LogicalAnd"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Tile_2"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/ToFloat_1"
  op: "Cast"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/LogicalAnd"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Sum"
  op: "Sum"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/ToFloat_1"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/AssignAdd"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/true_positives"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/precision_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/zeros_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/false_positives"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/false_positives/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/false_positives"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/precision_at_thresholds/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/false_positives/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/false_positives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/precision_at_thresholds/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/LogicalAnd_1"
  op: "LogicalAnd"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/LogicalNot"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/ToFloat_2"
  op: "Cast"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/LogicalAnd_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Sum_1"
  op: "Sum"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/ToFloat_2"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/AssignAdd_1"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/false_positives"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/precision_at_thresholds/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/add/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/add"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/add/x"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/true_positives/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/add_1"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/add"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/false_positives/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/precision_value"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/true_positives/read"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/add_2/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/add_2"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/add_2/x"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/AssignAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/add_3"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/add_2"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/precision_at_thresholds/precision_update_op"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/AssignAdd"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/Squeeze"
  op: "Squeeze"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/precision_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/Squeeze_1"
  op: "Squeeze"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/precision_update_op"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Cast"
  op: "Cast"
  input: "Const_1"
  attr {
    key: "DstT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/remove_squeezable_dimensions/Squeeze"
  op: "Squeeze"
  input: "dnn/binary_logistic_head/predictions/logistic"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Reshape"
  op: "Reshape"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/remove_squeezable_dimensions/Squeeze"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Reshape_1"
  op: "Reshape"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Cast"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/ExpandDims"
  op: "ExpandDims"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Const"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\360\n\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Tile"
  op: "Tile"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/ExpandDims"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/transpose/Rank"
  op: "Rank"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/transpose/sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/transpose/sub"
  op: "Sub"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/transpose/Rank"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/transpose/Range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/transpose/Range"
  op: "Range"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/transpose/Range/start"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/transpose/Rank"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/transpose/sub_1"
  op: "Sub"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/transpose/sub"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/transpose"
  op: "Transpose"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Reshape"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Tile_1/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Tile_1"
  op: "Tile"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/transpose"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Greater"
  op: "Greater"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Tile_1"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/LogicalNot"
  op: "LogicalNot"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Tile_2/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Tile_2"
  op: "Tile"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Reshape_1"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/true_positives"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/true_positives/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/true_positives"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/recall_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/true_positives/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/true_positives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/recall_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/LogicalAnd"
  op: "LogicalAnd"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Tile_2"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/ToFloat_1"
  op: "Cast"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/LogicalAnd"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Sum"
  op: "Sum"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/ToFloat_1"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/AssignAdd"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/true_positives"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/recall_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/zeros_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/false_negatives/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/false_negatives/read"
  op: "Identity"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/LogicalAnd_1"
  op: "LogicalAnd"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Tile_2"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/LogicalNot"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/ToFloat_2"
  op: "Cast"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/LogicalAnd_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2800
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Sum_1"
  op: "Sum"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/ToFloat_2"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/AssignAdd_1"
  op: "AssignAdd"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/add/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/add"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/add/x"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/true_positives/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/add_1"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/add"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/false_negatives/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/recall_value"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/true_positives/read"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/add_2/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/add_2"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/add_2/x"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/AssignAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/add_3"
  op: "Add"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/add_2"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/recall_at_thresholds/recall_update_op"
  op: "RealDiv"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/AssignAdd"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/Squeeze_2"
  op: "Squeeze"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/recall_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/metrics/Squeeze_3"
  op: "Squeeze"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/recall_update_op"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/_classification_output_alternatives/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\360\n\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/_classification_output_alternatives/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/_classification_output_alternatives/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/_classification_output_alternatives/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/_classification_output_alternatives/strided_slice"
  op: "StridedSlice"
  input: "dnn/binary_logistic_head/_classification_output_alternatives/Shape"
  input: "dnn/binary_logistic_head/_classification_output_alternatives/strided_slice/stack"
  input: "dnn/binary_logistic_head/_classification_output_alternatives/strided_slice/stack_1"
  input: "dnn/binary_logistic_head/_classification_output_alternatives/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/binary_logistic_head/_classification_output_alternatives/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\360\n\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/_classification_output_alternatives/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/_classification_output_alternatives/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/_classification_output_alternatives/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/_classification_output_alternatives/strided_slice_1"
  op: "StridedSlice"
  input: "dnn/binary_logistic_head/_classification_output_alternatives/Shape_1"
  input: "dnn/binary_logistic_head/_classification_output_alternatives/strided_slice_1/stack"
  input: "dnn/binary_logistic_head/_classification_output_alternatives/strided_slice_1/stack_1"
  input: "dnn/binary_logistic_head/_classification_output_alternatives/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/binary_logistic_head/_classification_output_alternatives/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/_classification_output_alternatives/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/_classification_output_alternatives/range"
  op: "Range"
  input: "dnn/binary_logistic_head/_classification_output_alternatives/range/start"
  input: "dnn/binary_logistic_head/_classification_output_alternatives/strided_slice_1"
  input: "dnn/binary_logistic_head/_classification_output_alternatives/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/_classification_output_alternatives/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/_classification_output_alternatives/ExpandDims"
  op: "ExpandDims"
  input: "dnn/binary_logistic_head/_classification_output_alternatives/range"
  input: "dnn/binary_logistic_head/_classification_output_alternatives/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/_classification_output_alternatives/Tile/multiples/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/_classification_output_alternatives/Tile/multiples"
  op: "Pack"
  input: "dnn/binary_logistic_head/_classification_output_alternatives/strided_slice"
  input: "dnn/binary_logistic_head/_classification_output_alternatives/Tile/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/binary_logistic_head/_classification_output_alternatives/Tile"
  op: "Tile"
  input: "dnn/binary_logistic_head/_classification_output_alternatives/ExpandDims"
  input: "dnn/binary_logistic_head/_classification_output_alternatives/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/binary_logistic_head/_classification_output_alternatives/classes_tensor"
  op: "AsString"
  input: "dnn/binary_logistic_head/_classification_output_alternatives/Tile"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^dnn/hiddenlayer_0/weights/part_0/Assign"
  input: "^dnn/hiddenlayer_0/biases/part_0/Assign"
  input: "^dnn/hiddenlayer_1/weights/part_0/Assign"
  input: "^dnn/hiddenlayer_1/biases/part_0/Assign"
  input: "^dnn/hiddenlayer_2/weights/part_0/Assign"
  input: "^dnn/hiddenlayer_2/biases/part_0/Assign"
  input: "^dnn/logits/weights/part_0/Assign"
  input: "^dnn/logits/biases/part_0/Assign"
  input: "^dnn/binary_logistic_head/dnn/learning_rate/Assign"
  input: "^dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad/Assign"
  input: "^dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad/Assign"
  input: "^dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad/Assign"
  input: "^dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad/Assign"
  input: "^dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad/Assign"
  input: "^dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad/Assign"
  input: "^dnn/binary_logistic_head/dnn/dnn/logits/weights/part_0/Adagrad/Assign"
  input: "^dnn/binary_logistic_head/dnn/dnn/logits/biases/part_0/Adagrad/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_2/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_2/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dnn/logits/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dnn/logits/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/dnn/learning_rate"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/dnn/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/dnn/dnn/logits/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/dnn/dnn/logits/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/mean/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/mean/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/accuracy/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/accuracy/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/mean_1/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/mean_1/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/mean_2/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_2/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/mean_2/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_2/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/mean_3/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_3/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/mean_3/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/mean_3/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/auc/true_positives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/auc/false_negatives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/auc/true_negatives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/auc/false_positives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/auc_1/true_positives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc_1/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/auc_1/false_negatives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc_1/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/auc_1/true_negatives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc_1/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/auc_1/false_positives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/auc_1/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/accuracy_1/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/accuracy_1/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/accuracy_1/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/true_positives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/precision_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/precision_at_thresholds/false_positives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/precision_at_thresholds/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/true_positives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/recall_at_thresholds/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  input: "report_uninitialized_variables/IsVariableInitialized_27"
  input: "report_uninitialized_variables/IsVariableInitialized_28"
  input: "report_uninitialized_variables/IsVariableInitialized_29"
  input: "report_uninitialized_variables/IsVariableInitialized_30"
  input: "report_uninitialized_variables/IsVariableInitialized_31"
  input: "report_uninitialized_variables/IsVariableInitialized_32"
  input: "report_uninitialized_variables/IsVariableInitialized_33"
  input: "report_uninitialized_variables/IsVariableInitialized_34"
  input: "report_uninitialized_variables/IsVariableInitialized_35"
  input: "report_uninitialized_variables/IsVariableInitialized_36"
  input: "report_uninitialized_variables/IsVariableInitialized_37"
  input: "report_uninitialized_variables/IsVariableInitialized_38"
  input: "report_uninitialized_variables/IsVariableInitialized_39"
  input: "report_uninitialized_variables/IsVariableInitialized_40"
  input: "report_uninitialized_variables/IsVariableInitialized_41"
  attr {
    key: "N"
    value {
      i: 42
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 42
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 42
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 42
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 42
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/weights/part_0"
        string_val: "dnn/hiddenlayer_0/biases/part_0"
        string_val: "dnn/hiddenlayer_1/weights/part_0"
        string_val: "dnn/hiddenlayer_1/biases/part_0"
        string_val: "dnn/hiddenlayer_2/weights/part_0"
        string_val: "dnn/hiddenlayer_2/biases/part_0"
        string_val: "dnn/logits/weights/part_0"
        string_val: "dnn/logits/biases/part_0"
        string_val: "dnn/binary_logistic_head/dnn/learning_rate"
        string_val: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
        string_val: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
        string_val: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
        string_val: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
        string_val: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
        string_val: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
        string_val: "dnn/binary_logistic_head/dnn/dnn/logits/weights/part_0/Adagrad"
        string_val: "dnn/binary_logistic_head/dnn/dnn/logits/biases/part_0/Adagrad"
        string_val: "dnn/binary_logistic_head/metrics/mean/total"
        string_val: "dnn/binary_logistic_head/metrics/mean/count"
        string_val: "dnn/binary_logistic_head/metrics/accuracy/total"
        string_val: "dnn/binary_logistic_head/metrics/accuracy/count"
        string_val: "dnn/binary_logistic_head/metrics/mean_1/total"
        string_val: "dnn/binary_logistic_head/metrics/mean_1/count"
        string_val: "dnn/binary_logistic_head/metrics/mean_2/total"
        string_val: "dnn/binary_logistic_head/metrics/mean_2/count"
        string_val: "dnn/binary_logistic_head/metrics/mean_3/total"
        string_val: "dnn/binary_logistic_head/metrics/mean_3/count"
        string_val: "dnn/binary_logistic_head/metrics/auc/true_positives"
        string_val: "dnn/binary_logistic_head/metrics/auc/false_negatives"
        string_val: "dnn/binary_logistic_head/metrics/auc/true_negatives"
        string_val: "dnn/binary_logistic_head/metrics/auc/false_positives"
        string_val: "dnn/binary_logistic_head/metrics/auc_1/true_positives"
        string_val: "dnn/binary_logistic_head/metrics/auc_1/false_negatives"
        string_val: "dnn/binary_logistic_head/metrics/auc_1/true_negatives"
        string_val: "dnn/binary_logistic_head/metrics/auc_1/false_positives"
        string_val: "dnn/binary_logistic_head/metrics/accuracy_1/total"
        string_val: "dnn/binary_logistic_head/metrics/accuracy_1/count"
        string_val: "dnn/binary_logistic_head/metrics/precision_at_thresholds/true_positives"
        string_val: "dnn/binary_logistic_head/metrics/precision_at_thresholds/false_positives"
        string_val: "dnn/binary_logistic_head/metrics/recall_at_thresholds/true_positives"
        string_val: "dnn/binary_logistic_head/metrics/recall_at_thresholds/false_negatives"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 42
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 42
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_0"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/concat/values_0"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 42
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 42
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/Gather"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_2/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_2/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dnn/logits/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dnn/logits/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/dnn/learning_rate"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/dnn/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/dnn/dnn/logits/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "dnn/binary_logistic_head/dnn/dnn/logits/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  input: "report_uninitialized_variables_1/IsVariableInitialized_13"
  input: "report_uninitialized_variables_1/IsVariableInitialized_14"
  input: "report_uninitialized_variables_1/IsVariableInitialized_15"
  input: "report_uninitialized_variables_1/IsVariableInitialized_16"
  input: "report_uninitialized_variables_1/IsVariableInitialized_17"
  attr {
    key: "N"
    value {
      i: 18
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 18
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/weights/part_0"
        string_val: "dnn/hiddenlayer_0/biases/part_0"
        string_val: "dnn/hiddenlayer_1/weights/part_0"
        string_val: "dnn/hiddenlayer_1/biases/part_0"
        string_val: "dnn/hiddenlayer_2/weights/part_0"
        string_val: "dnn/hiddenlayer_2/biases/part_0"
        string_val: "dnn/logits/weights/part_0"
        string_val: "dnn/logits/biases/part_0"
        string_val: "dnn/binary_logistic_head/dnn/learning_rate"
        string_val: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
        string_val: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
        string_val: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
        string_val: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
        string_val: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
        string_val: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
        string_val: "dnn/binary_logistic_head/dnn/dnn/logits/weights/part_0/Adagrad"
        string_val: "dnn/binary_logistic_head/dnn/dnn/logits/biases/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 18
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 18
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_0"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_0"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
  input: "^dnn/binary_logistic_head/metrics/mean/total/Assign"
  input: "^dnn/binary_logistic_head/metrics/mean/count/Assign"
  input: "^dnn/binary_logistic_head/metrics/accuracy/total/Assign"
  input: "^dnn/binary_logistic_head/metrics/accuracy/count/Assign"
  input: "^dnn/binary_logistic_head/metrics/mean_1/total/Assign"
  input: "^dnn/binary_logistic_head/metrics/mean_1/count/Assign"
  input: "^dnn/binary_logistic_head/metrics/mean_2/total/Assign"
  input: "^dnn/binary_logistic_head/metrics/mean_2/count/Assign"
  input: "^dnn/binary_logistic_head/metrics/mean_3/total/Assign"
  input: "^dnn/binary_logistic_head/metrics/mean_3/count/Assign"
  input: "^dnn/binary_logistic_head/metrics/auc/true_positives/Assign"
  input: "^dnn/binary_logistic_head/metrics/auc/false_negatives/Assign"
  input: "^dnn/binary_logistic_head/metrics/auc/true_negatives/Assign"
  input: "^dnn/binary_logistic_head/metrics/auc/false_positives/Assign"
  input: "^dnn/binary_logistic_head/metrics/auc_1/true_positives/Assign"
  input: "^dnn/binary_logistic_head/metrics/auc_1/false_negatives/Assign"
  input: "^dnn/binary_logistic_head/metrics/auc_1/true_negatives/Assign"
  input: "^dnn/binary_logistic_head/metrics/auc_1/false_positives/Assign"
  input: "^dnn/binary_logistic_head/metrics/accuracy_1/total/Assign"
  input: "^dnn/binary_logistic_head/metrics/accuracy_1/count/Assign"
  input: "^dnn/binary_logistic_head/metrics/precision_at_thresholds/true_positives/Assign"
  input: "^dnn/binary_logistic_head/metrics/precision_at_thresholds/false_positives/Assign"
  input: "^dnn/binary_logistic_head/metrics/recall_at_thresholds/true_positives/Assign"
  input: "^dnn/binary_logistic_head/metrics/recall_at_thresholds/false_negatives/Assign"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/dnn/hiddenlayer_0_fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_0_activation"
  input: "dnn/dnn/hiddenlayer_1_fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_1_activation"
  input: "dnn/dnn/hiddenlayer_2_fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_2_activation"
  input: "dnn/dnn/logits_fraction_of_zero_values"
  input: "dnn/dnn/logits_activation"
  input: "dnn/binary_logistic_head/ScalarSummary"
  attr {
    key: "N"
    value {
      i: 9
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_66672f304eda49ea88096099ee65c415/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 18
          }
        }
        string_val: "dnn/binary_logistic_head/dnn/learning_rate"
        string_val: "dnn/hiddenlayer_0/biases"
        string_val: "dnn/hiddenlayer_0/biases//hiddenlayer_0/biases/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_0/weights"
        string_val: "dnn/hiddenlayer_0/weights/hiddenlayer_0/weights/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_1/biases"
        string_val: "dnn/hiddenlayer_1/biases//hiddenlayer_1/biases/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_1/weights"
        string_val: "dnn/hiddenlayer_1/weights/hiddenlayer_1/weights/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_2/biases"
        string_val: "dnn/hiddenlayer_2/biases//hiddenlayer_2/biases/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_2/weights"
        string_val: "dnn/hiddenlayer_2/weights/hiddenlayer_2/weights/part_0/Adagrad"
        string_val: "dnn/logits/biases"
        string_val: "dnn/logits/biases/dnn/dnn/logits/biases/part_0/Adagrad"
        string_val: "dnn/logits/weights"
        string_val: "dnn/logits/weights/nn/dnn/logits/weights/part_0/Adagrad"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 18
          }
        }
        string_val: ""
        string_val: "10 0,10"
        string_val: "10 0,10"
        string_val: "5 10 0,5:0,10"
        string_val: "5 10 0,5:0,10"
        string_val: "20 0,20"
        string_val: "20 0,20"
        string_val: "10 20 0,10:0,20"
        string_val: "10 20 0,10:0,20"
        string_val: "10 0,10"
        string_val: "10 0,10"
        string_val: "20 10 0,20:0,10"
        string_val: "20 10 0,20:0,10"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "10 1 0,10:0,1"
        string_val: "10 1 0,10:0,1"
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "dnn/binary_logistic_head/dnn/learning_rate"
  input: "dnn/hiddenlayer_0/biases/part_0/read"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_0/weights/part_0/read"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_1/biases/part_0/read"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_1/weights/part_0/read"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_2/biases/part_0/read"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_2/weights/part_0/read"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad/read"
  input: "dnn/logits/biases/part_0/read"
  input: "dnn/binary_logistic_head/dnn/dnn/logits/biases/part_0/Adagrad/read"
  input: "dnn/logits/weights/part_0/read"
  input: "dnn/binary_logistic_head/dnn/dnn/logits/weights/part_0/Adagrad/read"
  input: "global_step"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/control_dependency"
  input: "^save/MergeV2Checkpoints"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/binary_logistic_head/dnn/learning_rate"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "dnn/binary_logistic_head/dnn/learning_rate"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/binary_logistic_head/dnn/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_1/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_0/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "10 0,10"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_1/tensor_names"
  input: "save/RestoreV2_1/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "dnn/hiddenlayer_0/biases/part_0"
  input: "save/RestoreV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_0/biases//hiddenlayer_0/biases/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2_2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "10 0,10"
      }
    }
  }
}
node {
  name: "save/RestoreV2_2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_2/tensor_names"
  input: "save/RestoreV2_2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
  input: "save/RestoreV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_3/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_0/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_3/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "5 10 0,5:0,10"
      }
    }
  }
}
node {
  name: "save/RestoreV2_3"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_3/tensor_names"
  input: "save/RestoreV2_3/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "dnn/hiddenlayer_0/weights/part_0"
  input: "save/RestoreV2_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_4/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_0/weights/hiddenlayer_0/weights/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2_4/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "5 10 0,5:0,10"
      }
    }
  }
}
node {
  name: "save/RestoreV2_4"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_4/tensor_names"
  input: "save/RestoreV2_4/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
  input: "save/RestoreV2_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_5/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_1/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_5/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "20 0,20"
      }
    }
  }
}
node {
  name: "save/RestoreV2_5"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_5/tensor_names"
  input: "save/RestoreV2_5/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "dnn/hiddenlayer_1/biases/part_0"
  input: "save/RestoreV2_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_6/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_1/biases//hiddenlayer_1/biases/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2_6/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "20 0,20"
      }
    }
  }
}
node {
  name: "save/RestoreV2_6"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_6/tensor_names"
  input: "save/RestoreV2_6/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
  input: "save/RestoreV2_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_7/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_1/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_7/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "10 20 0,10:0,20"
      }
    }
  }
}
node {
  name: "save/RestoreV2_7"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_7/tensor_names"
  input: "save/RestoreV2_7/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "dnn/hiddenlayer_1/weights/part_0"
  input: "save/RestoreV2_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_8/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_1/weights/hiddenlayer_1/weights/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2_8/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "10 20 0,10:0,20"
      }
    }
  }
}
node {
  name: "save/RestoreV2_8"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_8/tensor_names"
  input: "save/RestoreV2_8/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
  input: "save/RestoreV2_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_9/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_2/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_9/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "10 0,10"
      }
    }
  }
}
node {
  name: "save/RestoreV2_9"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_9/tensor_names"
  input: "save/RestoreV2_9/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "dnn/hiddenlayer_2/biases/part_0"
  input: "save/RestoreV2_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_10/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_2/biases//hiddenlayer_2/biases/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2_10/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "10 0,10"
      }
    }
  }
}
node {
  name: "save/RestoreV2_10"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_10/tensor_names"
  input: "save/RestoreV2_10/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
  input: "save/RestoreV2_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_11/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_2/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_11/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "20 10 0,20:0,10"
      }
    }
  }
}
node {
  name: "save/RestoreV2_11"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_11/tensor_names"
  input: "save/RestoreV2_11/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "dnn/hiddenlayer_2/weights/part_0"
  input: "save/RestoreV2_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_12/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_2/weights/hiddenlayer_2/weights/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2_12/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "20 10 0,20:0,10"
      }
    }
  }
}
node {
  name: "save/RestoreV2_12"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_12/tensor_names"
  input: "save/RestoreV2_12/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "dnn/binary_logistic_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
  input: "save/RestoreV2_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_13/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/logits/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_13/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "1 0,1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_13"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_13/tensor_names"
  input: "save/RestoreV2_13/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "dnn/logits/biases/part_0"
  input: "save/RestoreV2_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_14/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/logits/biases/dnn/dnn/logits/biases/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2_14/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "1 0,1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_14"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_14/tensor_names"
  input: "save/RestoreV2_14/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "dnn/binary_logistic_head/dnn/dnn/logits/biases/part_0/Adagrad"
  input: "save/RestoreV2_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_15/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/logits/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_15/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "10 1 0,10:0,1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_15"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_15/tensor_names"
  input: "save/RestoreV2_15/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "dnn/logits/weights/part_0"
  input: "save/RestoreV2_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_16/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/logits/weights/nn/dnn/logits/weights/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2_16/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "10 1 0,10:0,1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_16"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_16/tensor_names"
  input: "save/RestoreV2_16/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "dnn/binary_logistic_head/dnn/dnn/logits/weights/part_0/Adagrad"
  input: "save/RestoreV2_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_17/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2_17/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_17"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_17/tensor_names"
  input: "save/RestoreV2_17/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2_17"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
versions {
  producer: 22
}
